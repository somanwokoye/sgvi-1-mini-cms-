{"version":3,"sources":["global/app.interfaces.tsx","reducers/app.reducer.tsx","tenant-crud-handlers/create.tsx","tenant-crud-handlers/delete.tsx","tenant-crud-handlers/update.tsx","tenant-crud-handlers/read.tsx","components/Alert.tsx","contexts/app.contexts.ts","components/Tenant.tsx","components/TenantListHeader.tsx","components/TenantList.tsx","tenant-crud-handlers/relations-handlers.tsx","global/app.settings.tsx","components/AddTenant.tsx","components/EditTenant.tsx","components/ViewTenant.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TenantStatus","Gender","TenantTeamRole","TenantAccountOfficerRole","reducer","state","action","type","tenants","payload","tenantsCount","alert","show","message","error","onViewTenant","onAddTenant","onEditTenant","tenant","currentTenants","push","newTenantsCount","index","findIndex","id","splice","handleCreateTenant","tenantToCreate","createPrimaryContact","dispatch","a","fetch","method","headers","body","JSON","stringify","response","ok","Error","statusText","json","tenantCreated","handleDeleteTenant","handleUpdateTenant","editedTenant","handleReadTenants","findOptions","encodeURI","data","Alert","onClickHandler","color","onClick","remove","AppContext","React","createContext","Tenant","appContext","useContext","subDomainName","regionRootDomainName","primaryContact","firstName","lastName","primaryEmailAddress","status","className","window","confirm","TenantListHeader","TenantList","tenantListRows","map","RelationsHandlers","getAssignableRegions","setState","assignableRegionsInfo","assignableRegion","tenantCount","tenantCountCapacity","console","log","checkIfChosenDomainNameExists","chosenDomainNameExists","domainNameExistsChecked","AddTenant","props","initialState","name","regionName","address","moreInfo","undefined","customURLSlug","dateOfRegistration","Date","active","uniqueSchema","isPrimaryEmailAddressVerified","regionChosen","useState","onChange","event","target","value","onPrimaryContactChange","useEffect","onSubmit","preventDefault","placeholder","required","length","multiple","find","region","rootDomainName","style","minWidth","city","country","disabled","rows","A","O","S","pattern","max","toLocaleString","checked","maxLength","passwordHash","middleName","commonName","homeAddress","gender","F","M","dateOfBirth","nationality","stateOfOrigin","zip","EditTenant","initialTenantState","teamMembers","tenantAccountOfficers","tenantConfigDetail","customTheme","setTenant","tenantState","forEach","teamMember","user","roles","toString","tenantAccountOfficer","toLocaleDateString","ViewTenant","upload","fileToUpload","uploadButtonState","logo","src","FormData","append","now","aria-label","files","App","useReducer","myAlert","Provider","Boolean","location","hostname","match","initialData","document","getElementById","getAttribute","initialProps","parse","decodeURI","ReactDOM","hydrate","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3793551a.chunk.js","sourcesContent":["/**\n * Abstract base type for entities\n */\nexport interface IBaseAbstract {\n    id?: number;\n    dateCreated?: Date;\n    createdBy?: string;\n    dateLastModified?: Date;\n    lastModifiedBy?: string;\n    lastChangeInfo?: string;\n    deletedBy?: string;\n}\n/**\n * CustomTheme type\n */\nexport interface ICustomTheme extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    properties?: string;\n    bulmaProperties?: { primaryColor: string, primaryBackground: string };\n}\n\nexport enum TenantStatus {\n    A = \"active\",\n    S = \"suspended\",\n    O = \"owing\"\n}\n\nexport enum Gender {\n    M = \"male\",\n    F = \"female\"\n}\n\nexport enum TenantTeamRole {\n    A = \"admin\",\n    M = \"marketing\",\n    C = \"content-manager\"\n}\n\nexport enum TenantAccountOfficerRole {\n    M = \"manager\",\n    T = \"tech-support\"\n}\n\nexport interface IUser extends IBaseAbstract {\n    landlord?: boolean;\n    firstName?: string;\n    middleName?: string;\n    lastName?: string;\n    commonName?: string;\n    homeAddress?: string;\n    gender?: Gender;\n    dateOfBirth?: Date;\n    nationality?: string;\n    stateOfOrigin?: string;\n    zip?: string;\n    photo?: string;\n    photoMimeType?: string;\n    isActive?: boolean;\n    primaryEmailAddress?: string;\n    backupEmailAddress?: string;\n    phone?: { mobile?: string[], office?: string[], home?: string[] }\n    isPrimaryEmailAddressVerified?: boolean;\n    isBackupEmailAddressVerified?: boolean;\n    passwordSalt?: string;\n    passwordHash?: string;\n    isPasswordChangeRequired?: boolean;\n    resetPasswordToken?: string;\n    resetPasswordExpiration?: Date;\n    primaryEmailVerificationToken?: string;\n    backupEmailVerificationToken?: string;\n    emailVerificationTokenExpiration?: Date;\n    otpEnabled?: boolean\n    otpSecret?: string;\n    roles?: IRole[];\n    primaryContactForWhichTenants?: ITenant[];\n    tenantTeamMemberships?: ITenantTeam[];\n    accountOfficerForWhichTenants?: ITenantAccountOfficer[];\n\n}\n\nexport interface IRole extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    users?: IUser[];\n    landlord?: boolean; //Is this a role that is unique to landlords\n}\n\nexport interface ITenantTeam extends IBaseAbstract {\n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantTeamRole[]\n}\n\nexport interface ITenantAccountOfficer extends IBaseAbstract{ \n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantAccountOfficerRole[]\n}\n\nexport interface ITheme extends IBaseAbstract{\n    name?: string;\n    description?: string;\n    properties?: string;\n    tenants?: ITenant[];\n}\n\nexport interface IBilling extends IBaseAbstract{\n    uuid?: string;\n    code?: string;\n    description?: string;\n    type?: string;\n    tenant?: ITenant;\n}\n\nexport interface ITenantConfigDetail extends IBaseAbstract{\n    webServerProperties?: {\n        //domain: string, //E.g. r1.peakharmony.com. Set it up in nameserver. A tenant1 unique name for e.g. can then have a URL slug, tenant1.r1.peakharmony.com. Use default domain to handle all on the server. Only need to add an nginx server block conf file for custom domain\n        host: string,\n        port?: number,\n        login?: string,\n        password?: string\n    };\n    dbProperties?: {\n        type: string,\n        host: string,\n        port: number,\n        username: string,\n        password: string,\n        database: string,\n        /* Below is example for self-signed certificate. See https://node-postgres.com/features/ssl\n         * ssl: {\n            rejectUnauthorized: boolean,\n            ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n            key: fs.readFileSync('/path/to/client-key/postgresql.key').toString(),\n            cert: fs.readFileSync('/path/to/client-certificates/postgresql.crt').toString(),\n        }\n         */\n        ssl?: {\n            rejectUnauthorized?: boolean,\n            ca: string,\n            key?: string,\n            cert?: string\n        }\n    };\n    dbSchema?: string;\n    elasticSearchProperties?: {\n        node: string,\n        username: string,\n        password: string,\n        ca: string | null //public key for elasticsearch if using 9300 secure port. See https://www.elastic.co/guide/en/elasticsearch/reference/current/security-basic-setup-https.html for secure setup\n    };\n    redisProperties?: {\n        host: string,\n        port: number,\n        password: string,\n        db?: number,\n        //sentinels?: { host: string, port: number }[],\n        sentinels?: string, //supposed to be { host: string, port: number }[]\n        family?: number, //4 or 6 for ipv4 or ipv6\n        ca: string | null //in case of certificate. May not be needed if you follow the advise in https://redis.io/topics/security\n    };\n    rootFileSystem?: {\n        path: string, //could be a network path \n        username?: string, //just in case, there is some form of basic authentication \n        password?: string,\n        ca: string | null //if certificate or key is needed\n    };\n    /*\n    mailerOptions?: {\n        smtpUser: string,\n        smtpPword: string,\n        smtpServer?: string,//smtpService below overrides smtpServer\n        smtpPort?: number,\n        smtpService?: string,\n        smtpSecure: boolean\n    };\n    smtpAuth?: { //optional for the likes of Google OAuth2. See https://www.woolha.com/tutorials/node-js-send-email-using-gmail-with-nodemailer-oauth-2; https://nodemailer.com/smtp/oauth2/\n        type: string,\n        user: string,\n        clientId: string,\n        clientSecret: string,\n        refreshToken: string,\n        accessToken: string,\n        expires: number\n    };*/\n    smtpAuth?: { //optional for the likes of Google OAuth2. See https://www.woolha.com/tutorials/node-js-send-email-using-gmail-with-nodemailer-oauth-2; https://nodemailer.com/smtp/oauth2/\n        smtpUser: string,\n        smtpPword: string,\n        smtpHost: string,//smtpService below overrides smtpServer\n        smtpPort: number,\n        smtpService: string,\n        smtpSecure: boolean,\n        smtpOauth: boolean,\n        smtpClientId: string,\n        smtpClientSecret: string,\n        smtpAccessToken: string,\n        smtpRefreshToken: string,\n        smtpAccessUrl: string,\n        smtpPool: boolean,\n        smtpMaximumConnections: number,\n        smtpMaximumMessages: number\n    };\n    jwtConstants?: {\n        jwtSecretKeyExpiration: number, //e.g. 300\n        jwtRefreshSecretKeyExpiration: string, //e.g. '7d'\n        //assuming the use of own keys/certificate. Can be accommodated if using jsonwebtoken directly (see https://www.npmjs.com/package/jsonwebtoken)\n        jwtSecretKey: string,\n        jwtRefreshSecret: string,\n        jwtSecretPrivateKey: string,\n        jwtSecretPrivateKeyPassphrase: string,\n        jwtSecretPublicKey: string,\n        jwtSignAlgorithm: string,\n    };\n    authEnabled?: {\n        google: boolean,\n        facebook: boolean,\n        twoFactor: boolean\n    };\n    fbOauth2Constants?: {\n        fBAppId: string, //this should be different for each client, read from their storage. Using common for now\n        fBAppSecret: string,\n        createUserIfNotExists: boolean\n    };\n    googleOidcConstants?: {\n        googleOauth2ClientOidcIssuer: string,\n        googleApiKey: string,\n        googleOauth2ClientId: string,\n        googleOauth2ClientSecret: string,\n        createUserIfNotExists: boolean\n    };\n    otherUserOptions?: {\n        resetPasswordMailOptionSettings_TextTemplate: string,\n        confirmEmailMailOptionSettings_TextTemplate: string,\n        passwordResetExpiration: number,\n        emailVerificationExpiration: number\n    };\n    sizeLimits?: {\n        logoFileSizeLimit: number,\n        photoFileSizeLimit: number,\n        generalFileSizeLimit: number\n    };\n    theme?: {\n        custom: boolean, //if custom, the URL slug will be /tenantUniquePrefix\n        type: string, //URL slug /standard\n        rootUrl: string //this could be a remote Url \n    };\n    logo?: {\n        fileName: string,\n        mimeType: string\n    };\n    tenant?: ITenant;\n    region?: IRegion; //only used if creating region\n    regionId?: number; //send the regionId if not creating region\n\n}\n\n/**\n * Region Type\n */\nexport interface IRegion extends IBaseAbstract {\n    name: string;\n    description?: string;\n    country?: string;\n    city?: string;\n    rootDomainName?: string;\n    tenantCountCapacity?: number;\n    webServerProperties?: {\n        //domain: string, //E.g. r1.peakharmony.com. Set it up in nameserver. A tenant1 unique name for e.g. can then have a URL slug, tenant1.r1.peakharmony.com. Use default domain to handle all on the server. Only need to add an nginx server block conf file for custom domain\n        host: string, //IP\n        port?: number | null,\n        login?: string | null,\n        password?: string | null\n    };\n    dbProperties: {\n        type: string,\n        host: string,\n        port: number,\n        username: string,\n        password: string,\n        database: string,\n        /* Below is example for self-signed certificate. See https://node-postgres.com/features/ssl\n         * ssl: {\n            rejectUnauthorized: boolean,\n            ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n            key: fs.readFileSync('/path/to/client-key/postgresql.key').toString(),\n            cert: fs.readFileSync('/path/to/client-certificates/postgresql.crt').toString(),\n        }\n         */\n        ssl?: {\n            rejectUnauthorized?: boolean,\n            ca: string,\n            key?: string,\n            cert?: string\n        }\n    }; //for database connection\n    elasticSearchProperties: {\n        node: string,\n        username: string,\n        password: string,\n        ca: string | null //public key for elasticsearch if using 9300 secure port. See https://www.elastic.co/guide/en/elasticsearch/reference/current/security-basic-setup-https.html for secure setup\n    };\n    redisProperties: {\n        host: string,\n        port: number,\n        password: string,\n        db: number | null,\n        //sentinels?: { host: string, port: number }[],\n        family: number, //4 or 6 for ipv4 or ipv6\n        ca: string | null //in case of certificate. May not be needed if you follow the advise in https://redis.io/topics/security\n    }; //for redis connection.\n    rootFileSystem: {\n        path: string,\n        username: string | null, //just in case, there is some form of basic authentication \n        password: string | null,\n        ca: string | null //if certificate or key is needed\n    }; //the root file system for uploads for the region. Each tenant in the region should have a suffix based on tenant's uuid\n    /*\n    mailerOptions?: {\n        smtpUser: string,\n        smtpPword: string,\n        smtpServer: string,//smtpService below overrides smtpServer\n        smtpPort: number,\n        smtpService: string,\n        smtpSecure: boolean\n    }\n    smtpAuth?: { //optional for the likes of Google OAuth2. See https://www.woolha.com/tutorials/node-js-send-email-using-gmail-with-nodemailer-oauth-2; https://nodemailer.com/smtp/oauth2/\n        type: string,\n        user: string,\n        clientId: string,\n        clientSecret: string,\n        refreshToken: string,\n        accessToken: string,\n        expires: number\n    }*/\n    smtpAuth?: { //optional for the likes of Google OAuth2. See https://www.woolha.com/tutorials/node-js-send-email-using-gmail-with-nodemailer-oauth-2; https://nodemailer.com/smtp/oauth2/\n        smtpUser: string,\n        smtpPword: string,\n        smtpHost: string,//smtpService below overrides smtpServer\n        smtpPort: number,\n        smtpService: string,\n        smtpSecure: boolean,\n        smtpOauth: boolean,\n        smtpClientId: string,\n        smtpClientSecret: string,\n        smtpAccessToken: string,\n        smtpRefreshToken: string,\n        smtpAccessUrl: string,\n        smtpPool: boolean,\n        smtpMaximumConnections: number,\n        smtpMaximumMessages: number\n    };\n    jwtConstants?: {\n        jwtSecretKeyExpiration: number, //e.g. 300\n        jwtRefreshSecretKeyExpiration: string, //e.g. '7d'\n        //assuming the use of own keys/certificate. Can be accommodated if using jsonwebtoken directly (see https://www.npmjs.com/package/jsonwebtoken)\n        jwtSecretKey: string,\n        jwtRefreshSecret: string,\n        jwtSecretPrivateKey: string,\n        jwtSecretPrivateKeyPassphrase: string,\n        jwtSecretPublicKey: string,\n        jwtSignAlgorithm: string,\n    }\n    authEnabled?: {\n        google: boolean,\n        facebook: boolean,\n        twoFactor: boolean\n    }\n    fbOauth2Constants?: {\n        fBAppId: string, //this should be different for each client, read from their storage. Using common for now\n        fBAppSecret: string,\n        createUserIfNotExists: boolean\n    }\n    googleOidcConstants?: {\n        googleOauth2ClientOidcIssuer: string,\n        googleApiKey: string,\n        googleOauth2ClientId: string,\n        googleOauth2ClientSecret: string,\n        createUserIfNotExists: boolean\n    }\n    otherUserOptions?: {\n        resetPasswordMailOptionSettings_TextTemplate: string,\n        confirmEmailMailOptionSettings_TextTemplate: string,\n        passwordResetExpiration: number,\n        emailVerificationExpiration: number\n    }\n    sizeLimits?: {\n        logoFileSizeLimit: number,\n        photoFileSizeLimit: number,\n        generalFileSizeLimit: number\n    }\n    theme?: {\n        custom: boolean, //if custom, the URL slug will be /tenantUniquePrefix\n        type: string, //URL slug /standard\n        rootUrl: string, //this could be a remote Url \n        //I don't think I need to have properties here because that should be for theme builder app which is yet to be written.\n    }\n    tenantConfigDetails?: ITenantConfigDetail[];\n\n}\n/**\n * Tenant type\n */\nexport interface ITenant extends IBaseAbstract {\n    uuid?: string;\n    name?: string;\n    subDomainName?: string | null; \n    address?: string;\n    moreInfo?: string;\n    logo?: string;\n    logoMimeType?: string;\n    status?: TenantStatus;\n    customURLSlug?: string | null\n    dateOfRegistration?: Date\n    active?: boolean;\n    customTheme?: ICustomTheme;\n    primaryContact?: IUser;\n    teamMembers?: ITenantTeam[];\n    tenantAccountOfficers?: ITenantAccountOfficer[];\n    uniqueSchema?: boolean;\n    themes?: ITheme[];\n    billings?: IBilling[];\n    tenantConfigDetail?: ITenantConfigDetail;\n    regionName?: string; //denomalized name\n    regionRootDomainName?:string;\n    [key: string]: any\n}\n\n/**\n * State variable type\n */\nexport interface IState {\n    tenants?: ITenant[];\n    tenantsCount?: number; //for total number that corresponds to present find, in case of pagination\n    tenant?: ITenant | null; //This can be use for tenant to edit or tenant to view, depending on the function being carried out\n    onAddTenant: boolean;\n    onViewTenant: boolean;\n    onEditTenant: boolean;\n    alert: {\n        show: boolean,\n        message: string,\n        type: any //problem making string compatible with type '\"info\" | \"success\" | \"link\" |\n    }\n}\n\n/**\n * Action type for Reducer\n */\nexport interface IAction {\n    //Indicate possible reducer action types here as you identify them in your codes\n    type: 'FetchDataSuccess' | 'FetchDataFailure' | 'HandleOnAddTenant'\n    | 'HandleCancelCreate' | 'BeforeCreateTenant' | 'CreateTenantSuccess'\n    | 'CreateTenantFailure' | 'BeforeDeleteTenant' | 'DeleteTenantSuccess'\n    | 'DeleteTenantFailure' | 'HandleEditTenant' | 'HandleCancelUpdate'\n    | 'BeforeUpdateTenant' | 'UpdateTenantSuccess' | 'UpdateTenantFailure'\n    | 'HandleCloseAlert' | 'HandleViewTenant' | 'HandleCloseViewTenant';\n    payload?: {\n        tenants?: ITenant[], tenantsCount?: number, tenant?: ITenant, error?: Error,\n        id?: number | string\n    }\n\n}\n\n/*\nThe idea below is to provide room for specifying read\nhttps://github.com/typeorm/typeorm/blob/master/docs/find-options.md\n*/\nexport interface IFindOptions {\n    select?: string[];\n    relations?: string[];\n    skip?: number;\n    take?: number;\n    cache?: boolean;\n    where?: {}[] | {};\n    order?: {};\n\n}\n\n//Types that help to avoid overfetching\nexport interface IAssignableRegionInfo {\n    id: number;\n    rootDomainName: string;\n    name: string;\n    description: string;\n    country: string;\n    city: string;\n    tenantCountCapacity: number;\n    tenantCount: number;\n}","import { IState, IAction } from '../global/app.interfaces';\n\nconst reducer = (state: IState, action: IAction) => {\n    switch (action.type) {\n        case 'FetchDataSuccess':\n            return {\n                ...state, tenants: action.payload!.tenants, tenantsCount: action.payload!.tenantsCount\n            };\n        case 'FetchDataFailure':\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not load remote data: ${action.payload!.error}` }\n            };\n        case 'HandleViewTenant':\n            return {\n                ...state, onViewTenant: true, onAddTenant: false, onEditTenant: false, tenant: action.payload!.tenant\n            };\n        case 'HandleCloseViewTenant':\n            return{\n                ...state, onViewTenant: false, tenant: null\n            }\n        case 'HandleOnAddTenant':\n            return {\n                ...state, onAddTenant: true, onEditTenant: false, alert: {...state.alert, show: false}\n            };\n        case 'HandleCancelCreate':\n            return {\n                ...state, onAddTenant: false\n            };\n        case 'BeforeCreateTenant':\n            //goal here is to set alert to show creating tenant message\n            return {\n                ...state, alert: { show: true, type: \"info\", message: 'Creating tenant. Please wait!' }\n            };\n        case 'CreateTenantSuccess': {\n            //goal here is to update state with tenant created\n            const currentTenants = state.tenants!;\n            currentTenants.push(action.payload!.tenant!);\n            const newTenantsCount = state.tenantsCount!++;\n            return {\n                ...state, tenants: currentTenants, tenantsCount: newTenantsCount, onAddTenant: false, alert: { show: true, type: \"success\", message: 'Tenant successfully created!' }\n            };\n        };\n        case 'CreateTenantFailure':\n            //goal here is to set alert to show failure to create\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not create tenant: ${action.payload!.error}` }\n            };\n        case 'BeforeDeleteTenant':\n            //goal here is to set alert to show creating tenant message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Deleting tenant. Please wait!' } \n            };\n        case 'DeleteTenantSuccess': {\n            //goal here is to remove deleted tenant from state\n            const currentTenants = state.tenants;\n            //find the index corresponding to the tenant with the passed id\n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.id);\n            currentTenants!.splice(index, 1);\n            const newTenantsCount = state.tenantsCount!-- \n            return { \n                ...state, onViewTenant: false, tenants: currentTenants, tenantsCount: newTenantsCount, alert: { show: true, type: \"success\", message: 'Tenant successfully deleted!' } \n            };\n        };\n        case 'DeleteTenantFailure':\n            //goal here is to set alert to show failure to delete\n            return { \n                ...state, onViewTenant: false, alert: { show: true, type: \"danger\", message: `Could not delete tenant: ${action.payload!.error}` } \n            };\n        case 'BeforeUpdateTenant':\n            //goal here is to set alert to show updating tenant message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Updating tenant. Please wait!' } \n            };\n        case 'HandleCancelUpdate':\n            return { \n                ...state, onEditTenant: false \n            };\n        case 'HandleEditTenant': {\n            //alert(JSON.stringify(action.payload!.tenant))\n            //goal here is to find the tenant to be edited and set the tenant in state to be edited\n            const currentTenants = state.tenants;\n            \n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.id);\n            const tenant = currentTenants![index];\n            return { \n                ...state, onEditTenant: true, tenant: tenant, onAddTenant: false, alert: {...state.alert, show: false} \n            };\n        };\n        case 'UpdateTenantSuccess': {\n            //goal here is to update state with tenant updated\n            const currentTenants = state.tenants;\n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.tenant!.id);\n            //now change the value for that tenant in state\n            currentTenants![index] = action.payload!.tenant!;\n            return { \n                ...state, onViewTenant: false, tenants: currentTenants, tenant: action.payload!.tenant!, onEditTenant: false, alert: { show: true, type: \"success\", message: 'Tenant successfully updated!' } \n            };\n        };\n        case 'UpdateTenantFailure':\n            //goal here is to set alert to show failure to update\n            return { \n                ...state, onViewTenant: false, alert: { show: true, type: \"danger\", message: `Could not update tenant: ${action.payload!.error}` } \n            };\n        case 'HandleCloseAlert':\n            return { \n                ...state, alert: { show: false, message: '', type: '' } \n            };\n            \n        default:\n            return state; //return state as is if the action type indicated is not handled\n    }//close switch statement\n\n}\nexport default reducer;","import { IAction, ITenant } from \"../global/app.interfaces\";\n\n//function that handles Create Tenant\nexport const handleCreateTenant = async (tenantToCreate: ITenant, createPrimaryContact: boolean, dispatch: React.Dispatch<IAction>) => {\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating tenant ...'\n    dispatch({ type: 'BeforeCreateTenant' });\n    //let's try to write to backend\n    try {\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\n        const response = await fetch(`/v1/tenants?createPrimaryContact=${createPrimaryContact}`,\n            {\n                method: 'POST',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(tenantToCreate) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n        //Response is ok. Proceed!\n        const tenantCreated: ITenant = await response.json();\n\n        //useReducer to dispatch successful tenant creation, sending tenantCreated as payload.\n        dispatch({ type: 'CreateTenantSuccess', payload: { tenant: tenantCreated } });\n    } catch (error) {\n        //dispatch error to state for display\n        dispatch({ type: 'CreateTenantFailure', payload: { error: error } });\n    }\n}","import { IAction } from \"../global/app.interfaces\";\n\nexport const handleDeleteTenant = async (id: number | string, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    dispatch({ type: 'BeforeDeleteTenant' });\n    try {\n        const response = await fetch(`/v1/tenants/${id}`, //note this URL\n            {\n                method: 'DELETE',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed!\n        //remove tenant from state\n        dispatch({ type: 'DeleteTenantSuccess', payload: { id: id } })\n    } catch (error) {\n        //problem deleting from backend\n        dispatch({ type: 'DeleteTenantFailure', payload: { error: error } })\n    }\n}\n","import { IAction, ITenant } from \"../global/app.interfaces\";\n\n\nexport const handleUpdateTenant = async (editedTenant: ITenant, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    //Of course, this alert will only flash if it takes very minimal time to create item\n    dispatch({ type: 'BeforeUpdateTenant' })\n    //let's try to write to backend\n    try {\n        const response = await fetch(`/v1/tenants`,\n            {\n                method: 'PUT',//notice the method\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(editedTenant) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed with setting state with itemUpdated\n        //partial update does not return full object, hence I am not using below to get tenant updated\n        //const tenantUpdated = await response.json();\n        \n        await response.json();\n        //dispatch to state\n        dispatch({ type: 'UpdateTenantSuccess', payload: { tenant: editedTenant } })\n    } catch (error) {\n        alert('error zone')\n        dispatch({ type: 'UpdateTenantFailure', payload: { error: error } })\n    }\n\n}","import { IAction, IFindOptions } from \"../global/app.interfaces\";\n\n//function to fetch data\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\n//findOptions defaults to empty {}\nexport const handleReadTenants = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\n    try {\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\n      //when we serve both the client react application and the backend from the same domain.\n      const response = await fetch(`/v1/tenants?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\n\n      //const response = await fetch(`/v1/tenants`);\n      \n      if (!response.ok) throw new Error(response.statusText);\n\n      const data = await response.json();\n      \n      //set in state  \n      dispatch({type: 'FetchDataSuccess', payload: {tenantsCount: data[1], tenants: data[0]}})\n    } catch (error) {\n      //set state\n      //alert(error)\n      //alert(error)\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\n    }\n  };\n","import React from 'react';\nimport { Notification, Button } from 'react-bulma-components';\n\ntype Props = {\n    message: string,\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n    onClickHandler: ()=>void\n    \n}\n\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\n    return(\n        <Notification color={type} onClick={onClickHandler}>\n          {message}\n            <Button remove />\n        </Notification>\n    )\n}\n\nexport default Alert","/*Below is type definition for our context type.*/\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\n\nimport React from \"react\";\nimport { IAction } from \"../global/app.interfaces\";\n\n//different ones.\nexport type AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteTenant: Function };\n\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\n//We are also going to pass dispatch returned by useReducer.\nexport const AppContext = React.createContext<AppContextType>(null);","/** This component is for displaying each item in the record, passed to it from TenantList */\nimport React, { useContext } from 'react';\nimport { ITenant } from '../global/app.interfaces';\nimport { AppContext } from '../contexts/app.contexts';\n\ntype Props = {\n    tenant: ITenant,\n}\n\nconst Tenant: React.FC<Props> = ({tenant}) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteTenant = () => {\n        appContext!.handleDeleteTenant!(tenant.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditTenant = () => {\n        //appContext!.handleEditTenant!(tenant.id, appContext!.dispatch); //notice here that we are invoking the handleEditTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditTenant', payload: {id: tenant.id} });\n    };\n\n    const onViewTenant = () => {\n        appContext!.dispatch({type: 'HandleViewTenant', payload: {tenant}})\n    }\n\n    return (\n        <tr>\n            <td>{tenant.subDomainName}.{tenant.regionRootDomainName}</td>\n            <td>{tenant.primaryContact?.firstName}</td>\n            <td>{tenant.primaryContact?.lastName}</td>\n            <td>{tenant.primaryContact?.primaryEmailAddress}</td>\n            <td>{tenant.status}</td>\n            <td>\n                \n                <div className=\"buttons are-small\">\n                    <button className=\"button is-link\" onClick={onViewTenant}>View Detail</button>\n                    <button className=\"button is-warning\" onClick={onEditTenant}>Edit</button>\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteTenant() }}>Delete</button>\n                </div>\n                \n            </td>\n            \n        </tr>\n    );\n}\n\nexport default Tenant;\n","/** Table header. We are separating this from TenantList just in case it has to carry out\n * some specific tasks like firing sort event based on the header column clicked.\n*/\nimport React from 'react';\n\n\nconst TenantListHeader: React.FC = () => {\n\n  return (\n    <thead>\n      <tr>\n          <th>Default Domain Name</th>\n          <th>Contact First Name</th>\n          <th>Contact Last Name</th>\n          <th>Contact Email</th>\n          <th>Status</th>\n          <th>Action</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default TenantListHeader;\n","import React from 'react';\nimport { ITenant } from '../global/app.interfaces';\nimport Tenant from './Tenant';\nimport TenantListHeader from './TenantListHeader';\n\n\n//declare type for Props passed to this \ntype Props = {\n    tenants: ITenant[],\n}\n\nconst TenantList: React.FC<Props> = ({tenants}) => {\n\n    //prepare tenants for display in a table\n    let tenantListRows:any = null;\n    \n    tenantListRows = tenants.map((tenant) => {\n        return <Tenant tenant={tenant} key={tenant.id}/>\n    })\n    \n\n    return (\n        <table className=\"table is-striped is-narrow is-hoverable\" >\n            <caption><h3>Available tenants</h3></caption>\n            <TenantListHeader />\n            <tbody>\n                {tenantListRows}\n            </tbody>\n        </table>\n    );\n}\n\nexport default TenantList;\n","import { IAddTenantState } from \"../components/AddTenant\";\nimport { IAssignableRegionInfo } from \"../global/app.interfaces\";\nimport { API_VERSION_URL } from \"../global/app.settings\";\n\nexport class RelationsHandlers {\n    /**\n     * Get assignable regions\n     * @param state \n     * @param setState \n     */\n    public static getAssignableRegions = async (state: IAddTenantState, setState: React.Dispatch<React.SetStateAction<IAddTenantState>>) => {\n        try {\n            const response = await fetch(`${API_VERSION_URL}/regions/get-tenant-assignable-regions-info`,\n                {\n                    method: 'GET',//notice the method\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the server returns an array of Roles along with count.\n\n            //alert(JSON.stringify(data));\n\n            //filter out regions that are fully booked\n            let assignableRegionsInfo: IAssignableRegionInfo[] = [];\n            data.map((assignableRegion: IAssignableRegionInfo) => {\n\n                if (assignableRegion.tenantCount < assignableRegion.tenantCountCapacity)\n                    assignableRegionsInfo.push(assignableRegion);\n\n            })\n\n            //alert(JSON.stringify(assignableRegionsInfo));\n\n            setState({...state, assignableRegionsInfo});\n        } catch (error) {\n            //strange error\n            console.log(error);\n\n        }\n    }\n\n    public static checkIfChosenDomainNameExists = async (subDomainName: string, regionRootDomainName: string, state: IAddTenantState, setState: React.Dispatch<React.SetStateAction<IAddTenantState>>) => {\n        try {\n            const response = await fetch(`${API_VERSION_URL}/tenants/check-if-chosen-domain-name-exists/${subDomainName}/${regionRootDomainName}`,\n                {\n                    method: 'GET',//notice the method\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the server returns an array of Roles along with count.\n            \n            setState({...state, chosenDomainNameExists: data, domainNameExistsChecked: true});\n        } catch (error) {\n            //strange error\n            console.log(error);\n\n        }\n    }\n}","export const API_VERSION_URL = '/v1';\n\n","/** This component is for displaying each tenant in the record, passed to it from TenantList */\nimport React, { useEffect, useState } from 'react';\nimport { Gender, IAction, IAssignableRegionInfo, ITenant, TenantStatus } from '../global/app.interfaces';\nimport { RelationsHandlers } from '../tenant-crud-handlers/relations-handlers';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    handleCreateTenant: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\nexport type IAddTenantState = {\n    tenant: ITenant,\n    createPrimaryContact: boolean,\n    assignableRegionsInfo: IAssignableRegionInfo[],\n    regionChosen: IAssignableRegionInfo | null,\n    chosenDomainNameExists: boolean,\n    domainNameExistsChecked: boolean\n}\n\nconst AddTenant: React.FC<Props> = (props) => {\n\n    const initialTenantState: ITenant = {\n        name: '',\n        subDomainName: null,\n        regionName: '',\n        regionRootDomainName: '',\n        address: '',\n        moreInfo: '',\n        status: undefined,\n        customURLSlug: null,\n        dateOfRegistration: new Date(),\n        active: true,\n        uniqueSchema: true,\n        primaryContact: {isPrimaryEmailAddressVerified: false}\n\n        /* As we did for primaryContact, we can also do for the other relations\n        tenantConfigDetail: {},\n        customTheme: {},\n        teamMembers: [],\n        tenantAccountOfficers: []\n        */\n    }\n\n    const initialState: IAddTenantState = {\n        tenant: initialTenantState,\n        createPrimaryContact: true,\n        assignableRegionsInfo: [],\n        regionChosen: null,\n        chosenDomainNameExists: true,\n        domainNameExistsChecked: false\n    }\n\n    //declare the state variable for tenant to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [state, setState] = useState<IAddTenantState>({ ...initialState });\n\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const tenant = state.tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        tenant[target.name] = target.value;\n        if (target.name == 'subDomainName') {\n            setState({ ...state, tenant, domainNameExistsChecked: false });//checkin the modified tenant state and indicate that domainName needs to be checked again\n        } else {\n            setState({ ...state, tenant });//checkin the modified tenant state\n        }\n\n    }\n\n    const onRegionChange = (event: React.FormEvent) => {\n\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        const regionName = target.value;\n        const regionChosen: IAssignableRegionInfo = state.assignableRegionsInfo.find(region => region.name === regionName)!;\n\n        //setState\n        //first update tenant\n        const tenant = { ...state.tenant, regionName: regionChosen.name, regionRootDomainName: regionChosen.rootDomainName };\n        setState({ ...state, tenant, regionChosen, domainNameExistsChecked: false });\n        //Todo: test to see if subDomainName.rootDomainName is available\n        if (state.tenant.subDomainName != null && state.tenant.subDomainName != '') {\n            //make a call to server to check for unique combination of regionName and subDomainName in tenant\n        }\n\n    }\n    const checkIfChosenDomainNameExists = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (state.tenant.subDomainName != null && state.tenant.subDomainName != '' && state.tenant.regionRootDomainName != null)\n            RelationsHandlers.checkIfChosenDomainNameExists(\n                state.tenant.subDomainName!, state.tenant.regionRootDomainName!, state, setState);\n    }\n\n    const onPrimaryContactChange = (event: React.FormEvent) => {\n        const tenant = state.tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        //tenantState[target.name] = target.value;\n        tenant['primaryContact']![target.name] = target.value;\n        setState({ ...state, tenant });//checkin the modified state\n    }\n\n    const isPrimaryEmailAddressVerifiedChange = () => {\n        //toggle\n        const isPrimaryEmailAddressVerified = state.tenant.primaryContact!.isPrimaryEmailAddressVerified? false: true;\n        //override value in state\n        const primaryContact = {...state.tenant.primaryContact, isPrimaryEmailAddressVerified};\n        const tenant = {...state.tenant, primaryContact};\n        setState ({...state, tenant});\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        const tenant = state.tenant;\n\n        //Below condition is just to test the process requiring no further email verification\n        //which will allow tenantConfigDetail to be created.\n        /*if (tenant.primaryContact)\n            tenant.primaryContact.isPrimaryEmailAddressVerified = true;\n            */\n\n        props.handleCreateTenant(state.tenant, state.createPrimaryContact ? 1 : 0, props.dispatch);//call the handleAddTenant function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelCreate' })\n    }\n\n    const handlePrimaryContactChoice = () => {\n        //toggle choice in state\n        const createPrimaryContact = state.createPrimaryContact ? false : true\n        setState({ ...state, createPrimaryContact })\n    }\n\n    useEffect(() => {\n        RelationsHandlers.getAssignableRegions(state, setState);\n        // eslint-disable-next-line\n    }, []);\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"box\">\n                <div className=\"columns is-mobile\">\n                    <h3>Add Tenant</h3>\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"column\">\n\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Name</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Your preferred common name\" name=\"name\" value={state.tenant.name} onChange={onChange} required />\n                                </div>\n                            </div>\n                            {state.assignableRegionsInfo!.length > 0 &&\n\n                                <div className=\"box\">\n\n                                    <h6>Choose region and domain name</h6>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Region</label>\n                                        <select name=\"region\" id=\"region\" multiple className=\"control\" onChange={onRegionChange} style={{ minWidth: '50%' }}>\n                                            {state.assignableRegionsInfo.map((assignableRegion) => {\n                                                return <option value={assignableRegion.name}>{`Name: ${assignableRegion.name}; \n                                                        Location: ${assignableRegion.city}, \n                                                        ${assignableRegion.country}; Applicable domain name: ${assignableRegion.rootDomainName}`}</option>\n\n                                            })}\n                                        </select>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Subdomain name</label>\n                                        <div className=\"control\">\n                                            {\n                                                state.domainNameExistsChecked && state.tenant.subDomainName && state.regionChosen\n                                                    ?\n                                                    <div>\n                                                        <input className={`input ${state.chosenDomainNameExists ? 'is-danger' : 'is-success'}`} type=\"text\" placeholder=\"Enter your preferred subdomain name. Must be available for the Region chosen\" name=\"subDomainName\" value={state.tenant.subDomainName!} onChange={onChange} required />\n                                                        <p className={`help ${state.chosenDomainNameExists ? 'is-danger' : 'is-success'}`}>Your chosen domain name {state.tenant.subDomainName && state.regionChosen ? `${state.tenant.subDomainName}.${state.regionChosen.rootDomainName}` : ''} {state.chosenDomainNameExists ? 'is unavailable' : 'is available'}</p>\n                                                    </div>\n                                                    :\n                                                    <input className=\"input\" type=\"text\" placeholder=\"Enter your preferred subdomain name. Must be available for the Region chosen\" name=\"subDomainName\" value={state.tenant.subDomainName!} onChange={onChange} required />\n                                            }\n                                        </div>\n                                    </div>\n\n                                    <div className=\"field\">\n                                        <button className=\"button\" disabled={state.tenant.subDomainName && state.regionChosen ? false : true} onClick={checkIfChosenDomainNameExists}>Check Availability</button>\n                                    </div>\n                                </div>}\n\n                            <div className=\"field\">\n                                <label className=\"label\">Address</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={state.tenant.address} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">More Information</label>\n                                <div className=\"control\">\n                                    <textarea className=\"input\" placeholder=\"More information input\" rows={10} name=\"moreInfo\" value={state.tenant.moreInfo} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"select\">\n                                <select name=\"status\" onChange={onChange} value={state.tenant.status}>\n                                    <option value=\"notSelected\">Select tenant status</option>\n                                    <option value={TenantStatus.A}>Active</option>\n                                    <option value={TenantStatus.O}>Owing</option>\n                                    <option value={TenantStatus.S}>Suspended</option>\n                                </select>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Date of Registration</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max=\"{{todaysDate}}\" placeholder=\"Date of registration\" name=\"dateOfRegistration\" value={state.tenant.dateOfRegistration?.toLocaleString()} onChange={onChange} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <h4> Set Primary Contact</h4>\n                            <div className=\"field\">\n                                <div className=\"control\">\n                                    <span><input type=\"checkbox\" name=\"addPrimaryContact\" value=\"\" checked={state.createPrimaryContact} onChange={handlePrimaryContactChoice} />&nbsp;Create?</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        {\n                            !state.createPrimaryContact &&\n                            <div className=\"box\">\n                                <div className=\"field\">\n                                    <label className=\"label\">Primary Email Address of Contact</label>\n                                    <div className=\"control\">\n                                        <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.tenant.primaryContact!.primaryEmailAddress} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n\n                        {state.createPrimaryContact &&\n                            <div id=\"addPrimaryContactBox\" className=\"box\">\n                                <h5>Create Primary Contact</h5>\n                                <div className=\"field\">\n                                    <label className=\"label\">Primary Email Address</label>\n                                    <div className=\"control\">\n                                        <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.tenant.primaryContact!.primaryEmailAddress} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The email address should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <div className=\"control\">\n                                        <span><input type=\"checkbox\" name=\"isPrimaryEmailAddressVerified\" value=\"\" checked={state.tenant.primaryContact!.isPrimaryEmailAddressVerified} onChange={isPrimaryEmailAddressVerifiedChange} />&nbsp;Primary Email Address Verified?</span>\n                                    </div>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Password</label>\n                                    <div className=\"control\">\n                                        <input name=\"passwordHash\" className=\"input\" type=\"password\" placeholder=\"Enter password here\" maxLength={128} value={state.tenant.primaryContact!.passwordHash} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The password should not be more than 128 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">First Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"firstName\" className=\"input\" type=\"text\" placeholder=\"Enter first name here\" maxLength={30} value={state.tenant.primaryContact!.firstName} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The first name should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Last Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"lastName\" className=\"input\" type=\"text\" placeholder=\"Enter last name here\" maxLength={30} value={state.tenant.primaryContact!.lastName} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The last name should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Middle Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"middleName\" className=\"input\" type=\"text\" placeholder=\"Enter middle name here\" maxLength={30} value={state.tenant.primaryContact!.middleName} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">Even though optional, it is advisable to enter middle name</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Common Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"commonName\" className=\"input\" type=\"text\" placeholder=\"Enter common name here\" maxLength={20} value={state.tenant.primaryContact!.commonName} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">What is the user commonly called. The common name should not be more than 20 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Home Address</label>\n                                    <div className=\"control\">\n                                        <textarea name=\"homeAddress\" className=\"input\" rows={6} placeholder=\"Enter home address here\" maxLength={100} value={state.tenant.primaryContact!.homeAddress} onChange={onPrimaryContactChange}></textarea>\n                                    </div>\n                                    <p className=\"help\">The home address should not be more than 100 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Gender</label>\n                                    <div className=\"control\">\n                                        <div className=\"select\">\n                                            <select name=\"gender\" value={state.tenant.primaryContact!.gender} onChange={onPrimaryContactChange}>\n                                                <option value=\"notSelected\">Select Gender</option>\n                                                <option value={Gender.F}>Female</option>\n                                                <option value={Gender.M}>Male</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <p className=\"help\">Select the Gender</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Date of Birth</label>\n                                    <div className=\"control\">\n                                        <input name=\"dateOfBirth\" id=\"dateOfBirth\" className=\"input\" type=\"date\"\n                                            required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max={new Date().toLocaleString()} value={state.tenant.primaryContact!.dateOfBirth?.toLocaleString()} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The date of birth of the user. Pattern of entry is YYYY-MM-DD</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Nationality</label>\n                                    <div className=\"control\">\n                                        <input name=\"nationality\" className=\"input\" type=\"text\" placeholder=\"Enter nationality here\" maxLength={30} value={state.tenant.primaryContact!.nationality} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The nationality should not be more than 30 letters</p>\n                                </div>\n\n                                <div className=\"field\">\n                                    <label className=\"label\">State</label>\n                                    <div className=\"control\">\n                                        <input name=\"stateOfOrigin\" className=\"input\" type=\"text\" placeholder=\"Enter state here\" maxLength={30} value={state.tenant.primaryContact!.stateOfOrigin} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The state should not be more than 30 letters</p>\n                                </div>\n\n                                <div className=\"field\">\n                                    <label className=\"label\">Zip code</label>\n                                    <div className=\"control\">\n                                        <input name=\"zip\" className=\"input\" type=\"text\" placeholder=\"Enter zip code here\" maxLength={6} value={state.tenant.primaryContact!.zip} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The zip code should not be more than 6 letters</p>\n                                </div>\n\n                            </div>}\n\n                    </div>\n\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"field is-grouped\">\n                        <div className=\"control\">\n                            <button className=\"button is-link\">Submit</button>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n\n    );\n}\n\nexport default AddTenant;\n","/** This component is for displaying each tenant in the record, passed to it from TenantList */\nimport React, { useState } from 'react';\nimport { IAction, ITenant, TenantStatus } from '../global/app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    tenant: ITenant,\n    handleUpdateTenant: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\nconst EditTenant: React.FC<Props> = (props) => {\n\n    const initialTenantState: ITenant = {\n        id: props.tenant.id,\n        name: props.tenant.name,\n        address: props.tenant.address,\n        moreInfo: props.tenant.moreInfo,\n        status: props.tenant.status,\n        customURLSlug: props.tenant.customURLSlug,\n        dateOfRegistration: props.tenant.dateOfRegistration,\n        active: props.tenant.active,\n        uniqueSchema: props.tenant.uniqueSchema,\n        primaryContact: props.tenant.primaryContact,\n        teamMembers: props.tenant.teamMembers,\n        tenantAccountOfficers: props.tenant.tenantAccountOfficers,\n        tenantConfigDetail: props.tenant.tenantConfigDetail,\n        customTheme: props.tenant.customTheme,\n    }\n\n    //declare the state variable for tenant to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [tenant, setTenant] = useState<ITenant>({ ...initialTenantState });\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const tenantState = tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        tenantState[target.name] = target.value;\n        setTenant({ ...tenantState });//checkin the modified state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleUpdateTenant(tenant, props.dispatch);//call the handleAddTenant function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //props.handleCancelUpdate(props.dispatch);//call the function handleCancelAdd passed via props\n        //simply set state to make displayUpdate disappear\n        props.dispatch({ type: 'HandleCancelUpdate' });\n    }\n\n    //prepare team members to show (one to many)\n    const teamMembers: any =\n        tenant.teamMembers!.forEach((teamMember, index) => {\n            return (\n                <div className=\"columns\">\n                    <tr>\n                        <td>{index}</td>\n                        <td>{teamMember.user!.primaryEmailAddress}</td>\n                        <td>{teamMember.user!.firstName}</td>\n                        <td>{teamMember.user!.lastName}</td>\n                        <td>{teamMember.user!.primaryEmailAddress}</td>\n                        <td>{teamMember.roles!.toString()}</td>\n                        <td>\n                            <div className=\"buttons are-small\">\n                                <button className=\"button is-link\" onClick={() => { alert('Yet to be implemented'); return false }}>View Detail</button>\n                                <button className=\"button is-warning\" onClick={() => { alert('Yet to be implemented'); return false }}>Edit</button>\n                                <button className=\"button is-danger\" onClick={() => { alert('Yet to be implemented'); return false }}>Delete</button>\n                            </div>\n\n                        </td>\n                    </tr>\n                </div>\n            )\n        })\n\n    //prepare tenant account officers to show (one to many)\n    const tenantAccountOfficers: any =\n        tenant.tenantAccountOfficers!.forEach((tenantAccountOfficer, index) => {\n            return (\n                <div className=\"columns\">\n                    <tr>\n                        <td>{index}</td>\n                        <td>{tenantAccountOfficer.user!.primaryEmailAddress}</td>\n                        <td>{tenantAccountOfficer.user!.firstName}</td>\n                        <td>{tenantAccountOfficer.user!.lastName}</td>\n                        <td>{tenantAccountOfficer.user!.primaryEmailAddress}</td>\n                        <td>{tenantAccountOfficer.roles!.toString()}</td>\n                        <td>\n                            <div className=\"buttons are-small\">\n                                <button className=\"button is-link\" onClick={() => { alert('Yet to be implemented'); return false }}>View Detail</button>\n                                <button className=\"button is-warning\" onClick={() => { alert('Yet to be implemented'); return false }}>Edit</button>\n                                <button className=\"button is-danger\" onClick={() => { alert('Yet to be implemented'); return false }}>Delete</button>\n                            </div>\n\n                        </td>\n                    </tr>\n                </div>\n            )\n        })\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <div className=\"columns is-mobile\">\n            <div className=\"column\">\n                <form onSubmit={onSubmit}>\n                    <div className=\"box\">\n                        <div className=\"columns is-mobile\">\n                            <h3>Edit {props.tenant.subDomainName}.{props.tenant.regionRootDomainName}</h3>\n                        </div>\n                        <div className=\"columns is-mobile\">\n                            <div className=\"column\">\n                                <div className=\"box\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Name</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"text\" placeholder=\"Unique name input\" name=\"name\" value={tenant.name} onChange={onChange} required />\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Address</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={tenant.address} onChange={onChange} required />\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">More Information</label>\n                                        <div className=\"control\">\n                                            <textarea className=\"input\" placeholder=\"More information input\" rows={10} name=\"moreInfo\" value={tenant.moreInfo} onChange={onChange} />\n                                        </div>\n                                    </div>\n                                    <div className=\"select\">\n                                        <select name=\"status\" onChange={onChange} value={tenant.status}>\n                                            <option value=\"notSelected\">Select tenant status</option>\n                                            <option value={TenantStatus.A}>Active</option>\n                                            <option value={TenantStatus.O}>Owing</option>\n                                            <option value={TenantStatus.S}>Suspended</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Date of Registration: {new Date (tenant.dateOfRegistration!).toLocaleDateString(\"en-GB\")}</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max=\"{{todaysDate}}\" placeholder=\"Date of registration\" name=\"dateOfRegistration\" onChange={onChange} />\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"columns is-mobile\">\n                            <div className=\"field is-grouped\">\n                                <div className=\"control\">\n                                    <button className=\"button is-link\">Submit</button>\n                                </div>\n                                <div className=\"control\">\n                                    <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div className=\"column\">\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Primary Contact:</label>\n                                <div className=\"control\">\n                                    <input name=\"primaryEmailAddress\" className=\"input\" type=\"text\" placeholder=\"Enter valid email here\" maxLength={30} value={tenant.primaryContact!.primaryEmailAddress} required />\n                                </div>\n                                <p className=\"help\">The email address should not be more than 30 letters</p>\n                            </div>\n                            <div className=\"control\">\n                                <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Submit</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Team Members:</label>\n                                {tenant.teamMembers!.length > 0 ? teamMembers : <div>No team members yet</div>}\n                                <div className=\"control\">\n                                    <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Add New</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Account Officers:</label>\n                                {tenant.tenantAccountOfficers!.length > 0 ? tenantAccountOfficers : <div>No account officers yet</div>}\n                                <div className=\"control\">\n                                    <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Add New</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EditTenant;\n","/** This component is for displaying each item in the record, passed to it from TenantList */\nimport React, { useContext, useState } from 'react';\nimport { ITenant } from '../global/app.interfaces';\nimport { AppContext } from '../contexts/app.contexts';\nimport Alert from './Alert';\n\ntype Props = {\n    tenant: ITenant,\n}\n\ntype IState = {\n    upload: {\n        fileToUpload: Blob | string,\n        uploadButtonState: string\n    }\n    alert: {\n        show: boolean,\n        type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n        onClickHandler?: () => void\n        message: string\n    },\n    logo: {\n        src: string,\n        //cacheClearer: number\n    }\n}\n\nconst ViewTenant: React.FC<Props> = ({ tenant }) => {\n\n    const initialState: IState = {\n        upload: {\n            fileToUpload: \"\",\n            uploadButtonState: \"\"\n        },\n        alert: {\n            show: false,\n            type: undefined,\n            message: \"\"\n        },\n        logo: {\n            src: `/v1/tenants/${tenant.id}/logo`,\n            //cacheClearer: Date.now()\n        }\n    }\n\n    const [state, setState] = useState<IState>({ ...initialState })\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteTenant = () => {\n        appContext!.handleDeleteTenant!(tenant.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditTenant = () => {\n        //appContext!.handleEditTenant!(tenant.id, appContext!.dispatch); //notice here that we are invoking the handleEditTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditTenant', payload: { id: tenant.id } });\n    };\n\n    const onClickCloseButton = () => {\n        appContext!.dispatch({ type: 'HandleCloseViewTenant' })\n    }\n\n    const onChange = (event: any) => {\n        setState({ ...state, upload: { ...state.upload, fileToUpload: event.target.files[0] } })\n    }\n\n    const onSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const data = new FormData();\n        data.append('file', state.upload.fileToUpload);\n        try {\n            //show loading sign on submit button\n            setState({ ...state, upload: { ...state.upload, uploadButtonState: 'is-loading' } })\n            const response = await fetch(`/v1/tenants/${tenant.id}/logo`,\n                {\n                    method: 'POST',\n                    //don't use below, else you have to have a way to add boundary between multiparts. Let the browser detect and do that automatically\n                    //headers: {\n                    //    'Content-Type': 'multipart/form-data'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                    //},\n                    body: data\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n            //Response is ok. Proceed!\n            //clear loading sign and fileToUpload. Set browser img src to clear cache\n            setState({ ...state, logo: { ...state.logo, src: `${state.logo.src}?&${Date.now()}` }, upload: { fileToUpload: '', uploadButtonState: '' } })\n        } catch (error) {\n            setState({ ...state, alert: { show: true, type: 'danger', message: `logo upload failed: ${error.message}` } })\n        }\n    }\n\n    /*Additional handler functions here*/\n    //Below is called by Alert component.\n    const handleCloseAlert = () => {\n        setState({\n            ...state, alert: { show: false, message: '', type: undefined }\n        });\n    }\n\n    const alert = (\n        <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n    )\n\n    return (\n        <div className=\"modal modal-full-screen modal-fx-fadeInScale is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n                <header className=\"modal-card-head\">\n                    <h3 className=\"modal-card-title\">{`Details of ${tenant.subDomainName}.${tenant.regionRootDomainName}`}</h3>\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton} />\n                </header>\n                <section className=\"modal-card-body\">\n                    {/*<!-- Content ... -->*/}\n                    <div className=\"columns\">\n                        <div className=\"column is-two-thirds\">\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Name:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.name}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Address:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.address}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    More Information:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.moreInfo}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact firstname:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.firstName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact lastname:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.lastName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact email:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.primaryEmailAddress}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Status:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.status}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Active:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.active ? \"Yes\" : \"No\"}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    Logo\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <img src={`${state.logo.src}`} />\n                                </div>\n                            </div>\n                            <form className=\"columns\" onSubmit={onSubmit}>\n                                <div className=\"field\">\n                                    <label className=\"label\">Upload logo</label>\n                                    <div className=\"control\">\n                                        <input type=\"file\" name=\"file\" onChange={onChange} required />\n                                    </div>\n                                    <div className=\"field\">\n                                        {state.alert.show && alert}\n                                    </div>\n                                    <div className=\"field control\">\n                                        <button className={`button is-link is-small ${state.upload.uploadButtonState}`} type=\"submit\" >Submit</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <div className=\"buttons are-small\">\n                        <button className=\"button is-warning\" onClick={onEditTenant}>Edit</button>\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteTenant() }}>Delete</button>\n                    </div>\n                </footer>\n            </div>\n        </div>\n\n    );\n}\n\nexport default ViewTenant;\n","import React, { useEffect, useReducer } from 'react';\nimport { IAction, IFindOptions, IState } from './global/app.interfaces';\nimport reducer from './reducers/app.reducer';\n\nimport { handleCreateTenant } from './tenant-crud-handlers/create';\nimport { handleDeleteTenant } from './tenant-crud-handlers/delete';\nimport { handleUpdateTenant } from './tenant-crud-handlers/update';\nimport { handleReadTenants } from './tenant-crud-handlers/read';\nimport Alert from './components/Alert';\nimport TenantList from './components/TenantList';\nimport AddTenant from './components/AddTenant';\nimport EditTenant from './components/EditTenant';\nimport ViewTenant from './components/ViewTenant';\nimport { AppContext } from './contexts/app.contexts';\n\n/**\n * Here, we take for granted that on initialization, \n * jwt token string may be sent by the server, if there is valid login\n * To get the userinfo and roles from the token, \n * we can use https://github.com/auth0/jwt-decode\n */\n/*\ntype Props = {\n  jwtToken?: string\n}\n*/\n\n\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\nWe don't have to do this. But it is good to know.*/\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n\nconst App: React.FC<IState> = (props) => {//assuming that props passed will be initial state values\n\n  /*let us organize state, using useReducer*/\n  //Prepare initial state values\n  const initialState: IState =\n  {\n    tenants: props.tenants || [],\n    tenantsCount: props.tenantsCount || 0,\n    tenant: props.tenant || null,\n    onAddTenant: props.onAddTenant || false,\n    onViewTenant: props.onViewTenant || false,\n    onEditTenant: props.onEditTenant || false,\n    alert: props.alert || { show: false, message: '', type: '' }\n  };\n\n  //using useReducer instead of useState\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\n\n  /*Additional handler functions here*/\n  //Below is called by Alert component.\n  const handleCloseAlert = () => {\n    dispatch({ type: 'HandleCloseAlert' });\n  }\n\n\n  //Just testing findOptions. Can be used to qualify find.\n  //let findOptions: IFindOptions = {\"select\":[\"id\",\"uniqueName\"], \"order\": {\"uniqueName\": \"ASC\", \"id\": \"DESC\"}}\n  //let findOptions: IFindOptions = {}\n  let findOptions: IFindOptions = {\"relations\":[\"primaryContact\",\"teamMembers\", \"tenantAccountOfficers\", \"customTheme\", \"tenantConfigDetail\"]};\n  /**\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\n   */\n  useEffect(() => {\n    handleReadTenants(dispatch, findOptions);\n    // eslint-disable-next-line\n  }, []);\n\n  /*Time to logically decide what to show.*/\n  //Setup alert component as a variable so we don't keep repeating\n  const myAlert = (\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n  )\n\n  //check if editTenant should be loaded or not since it is conditional loading\n  if (state.onEditTenant && state.tenant !== null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <EditTenant tenant={state.tenant!} handleUpdateTenant={handleUpdateTenant} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onAddTenant) {//Display AddTenant along with TenantList if onAddTenant is true\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AddTenant handleCreateTenant={handleCreateTenant} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onViewTenant && state.tenant != null) {\n    return (\n      <div className=\"container\">\n        <div className=\"content is-medium\">\n          <p>\n            <AppContext.Provider value={{dispatch, handleDeleteTenant }}>\n              <ViewTenant tenant={state.tenant!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else {//onAddTenant, onEditTenant and onViewTenant are all false\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddTenant' }) }}>+ Add Tenant</button>\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport { IState } from './global/app.interfaces';\nimport * as serviceWorker from './serviceWorker';\n\n/* For server side rendering support, we need to use hydrate.\nWe will also get the json data that was written to our server-side template for use here\nOf course, this assumes that we have linked the built js clients to the server side template\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n\nconst initialData = document.getElementById('initial-props')!.getAttribute('data-json')!;\n\n//const initialProps: IState = JSON.parse(initialData? decodeURI(initialData): '');//parse initial data or empty string\n\nconst initialProps: IState = JSON.parse(decodeURI(initialData));//parse initial data or empty string\n\nReactDOM.hydrate(<App {...initialProps}/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}