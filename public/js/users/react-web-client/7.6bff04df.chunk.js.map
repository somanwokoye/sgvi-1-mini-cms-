{"version":3,"sources":["user-app/crud-handlers/search-handlers.tsx","user-app/components/search/SearchResult.tsx","user-app/components/search/SearchResultList.tsx","user-app/components/search/SearchUsersWithRouterNavigation.tsx"],"names":["SearchHandlers","fetchSuggestions","value","a","fetch","response","ok","Error","statusText","json","result","getUser","userId","searchUsers","searchString","SearchResult","searchResult","handleViewSearchResult","onClick","className","id","firstName","lastName","landlord","SearchResultList","searchResultListRows","searchResults","map","length","SearchUsersWithRouterNavigation","useState","suggestions","showUser","user","showSearchResults","state","setState","useRouteMatch","path","history","url","useHistory","onSuggestionsFetchRequested","console","log","onSuggestionSelected","event","suggestion","suggestionValue","suggestionIndex","sectionIndex","method","onSubmit","preventDefault","inputProps","placeholder","name","onChange","newValue","onSuggestionsClearRequested","getSuggestionValue","renderSuggestion","highlightFirstSuggestion","push","JSON","stringify","returnUrl"],"mappings":"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","file":"static/js/7.6bff04df.chunk.js","sourcesContent":["export class SearchHandlers {\n\n    public static fetchSuggestions = async (value: string) => {\n\n        const response = await fetch(`/v1/users/suggest?search-string=${value}`);\n        if (!response.ok) throw new Error(response.statusText);\n        const result = await response.json();\n        return result;\n    }\n\n    public static getUser = async (userId: number) => {\n\n        const response = await fetch(`/v1/users/${userId}`);\n        if (!response.ok) throw new Error(response.statusText);\n        return await response.json();\n\n    };\n\n    public static searchUsers = async (searchString: string) => {\n        const response = await fetch(`/v1/users/search?search-string=${searchString}`);\n        if (!response.ok) throw new Error(response.statusText);\n        return await response.json();\n\n    };\n}","/** This component is for displaying each item in the record, passed to it from UserList */\nimport React from 'react';\nimport UserSearchResult from './interfaces/search-result.interface';\n\ntype Props = {\n    searchResult: UserSearchResult,\n    handleViewSearchResult: Function\n}\n\nconst SearchResult: React.FC<Props> = ({searchResult, handleViewSearchResult}) => {\n\n    const onViewSearchResult = () => {\n        //Go and get the user by id\n        handleViewSearchResult(searchResult)\n    }\n\n    return (\n        <tr onClick={onViewSearchResult} className=\"column is-full\">\n            <td>\n                The information here is about user number {searchResult.id}. \n                You may or may not present this in a tabular form. \n                First name of user is {searchResult.firstName},\n                surname is {searchResult.lastName} and\n                the user is a {searchResult.landlord? 'landlord': 'tenant'}. \n                Click on any row to retrieve user details.</td>\n            <td>{searchResult.firstName}</td>\n            <td>{searchResult.lastName}</td>\n            <td>{searchResult.landlord? 'Landlord' : 'Tenant'}</td>\n        </tr>\n    );\n}\n\nexport default SearchResult;\n","import React from 'react';\nimport UserSearchResult from './interfaces/search-result.interface';\nimport SearchResult from './SearchResult';\n\n\n//declare type for Props passed to this \ntype Props = {\n    searchResults: UserSearchResult[],\n    handleViewSearchResult: Function\n}\n\nconst SearchResultList: React.FC<Props> = ({searchResults, handleViewSearchResult}) => {\n\n    //prepare users for display in a table\n    let searchResultListRows = null;\n    \n    searchResultListRows = searchResults.map((searchResult) => {\n        return <SearchResult searchResult={searchResult} key={searchResult.id} handleViewSearchResult={handleViewSearchResult} />\n    })\n\n    return (\n        <table className=\"table is-hoverable content\">\n            <h3>Users found:</h3>\n            <tbody>\n                {searchResultListRows.length>0? searchResultListRows: 'None'}\n            </tbody>\n        </table>\n    );\n}\n\nexport default SearchResultList;\n","/**\n * Here, the goal is to setup routes for ViewSearchResults, instead of using a modal window.\n * Not yet in order. Not yet in use\n */\nimport React, { useRef, useState } from 'react';\nimport Autosuggest from 'react-autosuggest'\nimport { IUser } from '../../app.interfaces';\nimport { SearchHandlers } from '../../crud-handlers/search-handlers';\nimport SearchResultList from './SearchResultList';\n\nimport {\n    useHistory, //see https://ultimatecourses.com/blog/programmatically-navigate-react-router\n    useRouteMatch //see https://reactrouter.com/web/example/nesting\n} from 'react-router-dom';\nimport { userInfo } from 'os';\n\ntype SuggestionType = { //same as setup in server\n    score: number,\n    id: number,\n    firstName: string,\n    lastName: string,\n    homeAddress: string,\n    landlord: boolean\n}\n\ntype StateType = {\n    value: string,\n    suggestions: SuggestionType[],\n    showUser?: boolean,\n    user?: IUser | null, //selected user to show\n    searchResults?: [] | null\n    showSearchResults?: boolean\n}\n\nconst SearchUsersWithRouterNavigation: React.FC = () => {\n\n    const initialState = {\n        suggestions: [],\n        value: '',\n        showUser: false,\n        user: null, //selected user to shown\n        searchResults: null,\n        showSearchResults: false,\n    }\n\n    const [state, setState] = useState<StateType>(initialState);\n\n    //const selectedSuggestionRef: React.MutableRefObject<any> = useRef('');\n\n\n    /* Here we are setting up route for navigating to view result */\n    // The `path` lets us build <Route> paths that are\n    // relative to the parent route, while the `url` lets\n    // us build relative links.\n    // See https://reactrouter.com/web/example/nesting\n    let { path, url } = useRouteMatch();\n\n    const history = useHistory(); //To dynamically go to a route. See https://ultimatecourses.com/blog/programmatically-navigate-react-router\n\n\n    const onSuggestionsFetchRequested = async ({ value }: any) => {\n\n        try {\n            const result = await SearchHandlers.fetchSuggestions(value);\n            //update selection ref to be in harmony with value to be put in state, in case it is needed\n            //selectedSuggestionRef.current = value;\n            setState({ ...state, suggestions: result, value }); //save value back in state?\n\n        } catch (error) {\n            setState({ ...state, suggestions: [], value: '' }); //clear\n            console.log(error)\n        }\n    }\n\n    const renderSuggestion = (suggestion: SuggestionType) => {\n        //This is responsibile for showing what will appear in suggestion drop down. Could be product type, name, etc. Whatever combinations will be intuitive to the user\n        return (\n            <div>\n                {`${suggestion.firstName} ${suggestion.lastName}`}\n            </div>\n        )\n    }\n\n    const onSuggestionsClearRequested = () => {\n        //Clear values in state when user clears input box. Also called by <Autosuggest /> under some conditions\n        setState({ ...state, suggestions: [], value: '' })\n    }\n\n    /**\n     * This is called whenever input field value changes\n     * @param event \n     * @param param1 \n     */\n    const onChange = (event: any, { newValue, method }: any) => {\n        //The optional method argument here could be useful if one has to distinguish between 'click' and 'enter' and act accordingly\n        setState({ ...state, value: newValue })\n    }\n\n    /**\n     * Optional prop but useful for getting immediately, the details of a specific suggestion that the user\n     * chooses to click on.\n     * @param event \n     * @param param1 \n     */\n    const onSuggestionSelected = async (event: any, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }: any) => {\n        //use ref to hold current selection, just in case it is needed. Not really using it.\n        //selectedSuggestionRef.current = suggestionValue;\n        //As I have set the suggestionValue to the userId as passed to <Autosuggest /> I will directly fetch the suggestion selected\n        try {\n            const user: IUser = await SearchHandlers.getUser(suggestionValue);\n\n            //put user in localStorage for pickup by ViewSelectedUserWithRouterNavigation\n            //localStorage.setItem(\"userForViewPlusReturnUrl\", JSON.stringify({ ...user, returnUrl: path }));//Note that I add returnUrl to the string\n            setState({ ...state, showUser: true, user })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    /**\n     * This is called when the user hits enter key with search input form in focus.\n     * My idea here is to do a match search call for the current value in state at the time enter was clicked\n     * This should return a number of search results that correspond to the search string. \n     * The search result can then be used to establish links to details of each result.\n     * @param event \n     */\n    const onSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        //TODO: call users/search to search the current value in state\n        try {\n            const searchResults = await SearchHandlers.searchUsers(state.value);\n            setState({ ...state, searchResults, showSearchResults: true, value: '' })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    /**\n     * These props are for use by <Autosuggest />\n     */\n    const inputProps = {\n        placeholder: 'Start typing user full name for search',\n        value: state.value,\n        name: \"autosuggest\",\n        onChange: onChange\n    }\n\n    /* No need for this. history.goBack should do it.\n    const handleCloseUser = () => {\n        setState({ ...state, showUser: false, user: null })\n    }\n    */\n\n    const handleViewSearchResult = (user: IUser) => {//to be passed on to the SearchResult component via SearchResultList. I should have used context though.\n        //put user in localStorage for pickup by ViewSelectedUserWithRouterNavigation\n        //localStorage.setItem(\"userForViewPlusReturnUrl\", JSON.stringify({ ...user, returnUrl: path}));//Note that I add returnUrl to the string\n        setState({ ...state, showUser: true, user });\n    }\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"box\">\n                    <div className=\"columns is-mobile\">\n                        <form onSubmit={onSubmit} className=\"column is-one-third\">\n                            <div className=\"field\">\n                                <label className=\"label\">Search:</label>\n                                <Autosuggest\n                                    suggestions={state.suggestions}\n                                    onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                                    onSuggestionsClearRequested={onSuggestionsClearRequested}\n                                    getSuggestionValue={(suggestion: SuggestionType) => `${suggestion.id}`}\n                                    renderSuggestion={renderSuggestion}\n                                    inputProps={inputProps}\n                                    onSuggestionSelected={onSuggestionSelected} //optional\n                                    highlightFirstSuggestion={false} //optional. Defaults to false\n                                />\n                                {/* Below is just in case you need to display the current search string typed in\n                            <label className=\"label\">String to search:</label>\n                            <input className=\"label\" style=\n                                {{\n                                    backgroundColor: 'transparent',\n                                    borderColor: 'transparent',\n                                    outline: 'transparent'\n                                }}\n                                name=\"selected-suggestion\" value={selectedSuggestionRef.current} readOnly \n                            />\n                            */}\n                            </div>\n\n                        </form>\n                    </div>\n                    <div className=\"columns is-mobile\">\n                        <div className=\"column is-full\">\n                            {\n                                //localStorage.getItem(\"userForView\") && state.showUser && history.push(`${path}/view-selected`, localStorage.getItem(\"userForView\"))\n                                state.user && state.showUser && history.push(`${path}/view-selected`, JSON.stringify({...state.user, returnUrl: path}))\n                            }\n                            {\n                                state.searchResults && state.showSearchResults && <SearchResultList searchResults={state.searchResults} handleViewSearchResult={handleViewSearchResult} />\n                            }\n                        </div>\n\n                    </div>\n                    {/*\n            <div>\n                <input list=\"browsers\" name=\"browser\" />\n                <datalist id=\"browsers\">\n                    <option value=\"Internet Explorer\" />\n                    <option value=\"Firefox\" />\n                    <option value=\"Chrome\" />\n                    <option value=\"Opera\" />\n                    <option value=\"Safari\" />\n                </datalist>\n            </div>\n            */}\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default SearchUsersWithRouterNavigation;"],"sourceRoot":""}