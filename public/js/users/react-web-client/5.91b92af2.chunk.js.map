{"version":3,"sources":["user-app/app.interfaces.tsx","user-app/reducers/app.reducer.tsx","user-app/crud-handlers/read.tsx","user-app/crud-handlers/update/update.tsx","user-app/crud-handlers/delete.tsx","user-app/crud-handlers/create.tsx","user-app/components/User.tsx","user-app/components/UserListHeader.tsx","user-app/components/UserList.tsx","user-app/components/AddUser.tsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","user-app/crud-handlers/update/relations-handlers.tsx","user-app/components/EditUser.tsx","user-app/components/ViewUser.tsx","user-app/UserApp.tsx","global/app.settings.tsx","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","global/components/Alert.tsx"],"names":["TenantStatus","Gender","TenantTeamRole","TenantAccountOfficerRole","reducer","state","action","type","users","payload","usersCount","actionButtonState","alert","show","message","error","onViewUser","onAddUser","onEditUser","user","length","currentUsers","index","findIndex","id","handleReadUsers","dispatch","a","findOptions","fetch","encodeURI","JSON","stringify","response","ok","Error","statusText","json","data","handleUpdateUser","editedUser","method","headers","body","DEFAULT_ACTION_BUTTON_STATE","handleDeleteUser","splice","handleCreateUser","userToCreate","userCreated","push","User","appContext","useContext","AppContext","firstName","lastName","commonName","gender","primaryEmailAddress","landlord","className","onClick","window","confirm","RoleListHeader","UserList","props","userListRows","map","UserListHeader","AddUser","useState","phone","office","mobile","home","roles","setState","onChange","event","currentUser","target","name","value","onSubmit","preventDefault","checked","placeholder","maxLength","required","passwordHash","middleName","F","M","pattern","max","Date","toLocaleString","dateOfBirth","rows","homeAddress","disabled","undefined","nationality","stateOfOrigin","zip","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","RelationsHandlers","getAssignableRoles","API_VERSION_URL","assignableRoles","role","assignedRole","relations","console","log","addRolesById","userId","roleIds","query","roleId","userRoles","submitButtonState","removeRoleFromUser","deleteButtonState","setAsPrimaryContactForATenantByTenantUniqueName","uniqueNameOfTenantToAdd","primaryContactForWhichTenants","removeAsPrimaryContactForATenantByTenantId","tenantId","setTenantTeamMembershipByTenantUniqueName","rolesToAdd","tenantTeamMemberships","deleteTenantTeamMemberShipById","submitPhoto","photo","uploadButtonState","src","now","fileToUpload","UserRolesDisplay","PrimaryContactForWhichTenantsDisplay","tenant","uniqueName","TenantTeamMembershipsDisplay","tenantTeam","tenantUniqueId","tenantUniqueName","EditUser","initialState","isActive","backupEmailAddress","isPasswordChangeRequired","photoMimeType","isPrimaryEmailAddressVerified","isBackupEmailAddressVerified","otpEnabled","accountOfficerForWhichTenants","tenants","onPhotoSubmit","FormData","append","onAddRolesChange","document","getElementById","options","option","selected","onAddRolesSubmit","onAddPrimaryContactForWhichTenantsChange","onAddPrimaryContactForWhichTenantsSubmit","onAddTenantTeamMembershipUniqueNameChange","onAddTenantTeamMembershipRolesChange","onAddTenantTeamMembershipSubmit","useEffect","toLocaleDateString","alt","files","multiple","style","minWidth","values","Object","tenantTeamRoleEnumValues","entries","ViewUser","aria-label","React","createContext","UserApp","useReducer","scrollTo","myAlert","Alert","onClickHandler","Provider","_classCallCheck","instance","Constructor","color","remove"],"mappings":"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","file":"static/js/5.91b92af2.chunk.js","sourcesContent":["import { IBaseAbstract } from \"../global/app.interfaces\";\n\n/**\n * CustomTheme type\n */\nexport interface ICustomTheme extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    properties?: string;\n    bulmaProperties?: { primaryColor: string, primaryBackground: string };\n}\n\nexport enum TenantStatus {\n    A = \"active\",\n    S = \"suspended\",\n    O = \"owing\"\n}\n\nexport enum Gender {\n    M = \"male\",\n    F = \"female\"\n}\n\nexport enum TenantTeamRole {\n    A = \"admin\",\n    M = \"marketing\",\n    C = \"content-manager\"\n}\n\nexport interface ICreateTenantTeamRolesDto{\n\n     roles: TenantTeamRole[];\n}\n\nexport enum TenantAccountOfficerRole {\n    M = \"manager\",\n    T = \"tech-support\"\n}\n\nexport interface IUser extends IBaseAbstract {\n    landlord?: boolean;\n    firstName?: string;\n    middleName?: string;\n    lastName?: string;\n    commonName?: string;\n    homeAddress?: string;\n    gender?: Gender;\n    dateOfBirth?: Date;\n    nationality?: string;\n    stateOfOrigin?: string;\n    zip?: string;\n    photo?: string;\n    photoMimeType?: string;\n    isActive?: boolean;\n    primaryEmailAddress?: string;\n    backupEmailAddress?: string;\n    phone?: { mobile?: string[], office?: string[], home?: string[] }\n    isPrimaryEmailAddressVerified?: boolean;\n    isBackupEmailAddressVerified?: boolean;\n    passwordSalt?: string;\n    passwordHash?: string;\n    isPasswordChangeRequired?: boolean;\n    resetPasswordToken?: string;\n    resetPasswordExpiration?: Date;\n    primaryEmailVerificationToken?: string;\n    backupEmailVerificationToken?: string;\n    emailVerificationTokenExpiration?: Date;\n    otpEnabled?: boolean\n    otpSecret?: string;\n    roles?: IRole[];\n    primaryContactForWhichTenants?: ITenant[];\n    tenantTeamMemberships?: ITenantTeam[];\n    accountOfficerForWhichTenants?: ITenantAccountOfficer[];\n    [key: string]: any\n\n}\n\n\n\nexport interface IRole extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    users?: IUser[];\n    landlord?: boolean; //Is this a role that is unique to landlords\n}\n\nexport interface ITenantTeam extends IBaseAbstract {\n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantTeamRole[]\n    tenantUniqueName?: string\n    tenantUniqueId?: number\n}\n\nexport interface ITenantAccountOfficer extends IBaseAbstract {\n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantAccountOfficerRole[]\n}\n\nexport interface ITheme extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    properties?: string;\n    tenants?: ITenant[];\n}\n\nexport interface IBilling extends IBaseAbstract {\n    uuid?: string;\n    code?: string;\n    description?: string;\n    type?: string;\n    tenant?: ITenant;\n}\n\nexport interface IConnectionResource extends IBaseAbstract {\n    uuid?: string;\n    name?: string\n    description?: string\n    active?: boolean\n    platform?: string\n    connectionProperties?: {\n        type: string,\n        host: string,\n        port: string,\n        username: string,\n        password: string,\n        database: string,\n        schema: string\n    };\n    rootFileSystem?: string;\n    tenant?: ITenant;\n}\n\n/**\n * Tenant type\n */\nexport interface ITenant extends IBaseAbstract {\n    uuid?: string;\n    uniqueName?: string;\n    address?: string;\n    moreInfo?: string;\n    logo?: string;\n    logoMimeType?: string;\n    status?: TenantStatus;\n    customURLSlug?: string | null\n    dateOfRegistration?: Date\n    active?: boolean;\n    customTheme?: ICustomTheme;\n    primaryContact?: IUser;\n    teamMembers?: ITenantTeam[];\n    tenantAccountOfficers?: ITenantAccountOfficer[];\n    uniqueSchema?: boolean;\n    themes?: ITheme[];\n    billings?: IBilling[];\n    connectionResource?: IConnectionResource;\n    [key: string]: any\n}\n\n/**\n * State variable type. This is for the general crud as used in UserApp.tsx\n */\nexport interface IState {\n    users?: IUser[];\n    usersCount?: number; //for total number that corresponds to present find, in case of pagination\n    user?: ITenant | null; //This can be used for user to edit or user to view, depending on the function being carried out\n    onAddUser: boolean;\n    onViewUser: boolean;\n    onEditUser: boolean;\n    alert: {\n        show: boolean,\n        message: string,\n        type: 'info' | 'success' | 'link' | 'danger' | '' | any,\n    },\n    actionButtonState: 'is-info' | 'is-success' | 'is-loading' | 'is-danger' | 'is-primary' | any //used for deciding whether to show loading button state or not. Change to is-loading \n}\n\n\n//for EditUser\nexport interface IEditUserState {\n    user: IUser,\n    relations: {\n        assignableRoles?: IRole[], //this is for roles to be listed in the dropbox\n        tenants?: ITenant[], //this is for tenants to be listed in the dropbox. Not in use! I am finding by tenant unique name\n        photo: {\n            fileToUpload: Blob | string,\n            uploadButtonState: string,\n            alert: {\n                show: boolean,\n                type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n                onClickHandler?: () => void\n                message: string\n            },\n            src: string\n        },\n        userRoles: { //for user roles to be added to and removed from\n            rolesToAdd?: number[], //this is for adding one or more roles to user\n            submitButtonState: string,\n            deleteButtonState: string,\n        },\n        primaryContactForWhichTenants:{\n            uniqueNameOfTenantToAdd?: string | undefined, //doing one by one. This is the unique name of tenant to add\n            submitButtonState: string,\n            deleteButtonState: string,\n        },\n        tenantTeamMemberships:{\n            uniqueNameOfTenantToAdd?: string | undefined, //doing one by one. This is the unique name of tenant to add\n            rolesToAdd?: TenantTeamRole[] //roles as a tenant team member to add\n            submitButtonState: string,\n            deleteButtonState: string,\n            \n        }\n\n    }\n}\n\n/**\n * Action type for Reducer\n */\nexport interface IAction {\n    //Indicate possible reducer action types here as you identify them in your codes\n    type: 'FetchDataSuccess' | 'FetchDataFailure' | 'HandleOnAddUser'\n    | 'HandleCancelCreate' | 'BeforeCreateUser' | 'CreateUserSuccess'\n    | 'CreateUserFailure' | 'BeforeDeleteUser' | 'DeleteUserSuccess'\n    | 'DeleteUserFailure' | 'HandleEditUser' | 'HandleCancelUpdate'\n    | 'BeforeUpdateUser' | 'UpdateUserSuccess' | 'UpdateUserFailure'\n    | 'HandleCloseAlert' | 'HandleViewUser' | 'HandleCloseViewUser'\n    //for relations\n    | 'BeforeAddRoleToUser' | 'AddRoleToUserSuccess' | 'AddRoleToUserFailure';\n\n    payload?: {\n        users?: IUser[], usersCount?: number, user?: IUser, error?: Error,\n        id?: number | string,\n        actionButtonState?: 'is-info' | 'is-success' | 'is-loading' | 'is-danger' | 'is-primary' //used for deciding whether to show loading button state or not. Change to is-loading \n    }\n\n}\n\n","import { IState, IAction } from '../app.interfaces';\n\nconst reducer = (state: IState, action: IAction) => {\n    switch (action.type) {\n        case 'FetchDataSuccess':\n            return {\n                ...state, users: action.payload!.users, usersCount: action.payload!.usersCount, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'FetchDataFailure':\n            return {\n                ...state, alert: { show: true, type: 'danger', message: `Could not load remote data: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleViewUser':\n            return {\n                ...state, onViewUser: true, onAddUser: false, onEditUser: false, user: action.payload!.user\n            };\n        case 'HandleCloseViewUser':\n            return {\n                ...state, onViewUser: false, user: null\n            }\n        case 'HandleOnAddUser':\n            return {\n                ...state, onAddUser: true, onEditUser: false, alert: { ...state.alert, show: false }\n            };\n        case 'HandleCancelCreate':\n            return {\n                ...state, onAddUser: false\n            };\n        case 'BeforeCreateUser':\n            //goal here is to set alert and/or is-loading button to show creating user message. May be better to simply use is-loading button css\n            return {\n                ...state, alert: { show: true, type: 'info', message: 'Creating user. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'CreateUserSuccess':\n            //goal here is to update state with user created\n            //React team recommends that state modifications like that shown below should not be in useReducer.\n            //Hence, I had to pass currentState to handleCreateUser and modify the currentState there before passing to reducer\n            /*\n            const currentUsers = state.users!;\n            \n            currentUsers.push(action.payload!.user!);\n            const newUsersCount = state.usersCount!++;\n            */\n\n            return {\n                //...state, users: currentUsers, usersCount: newUsersCount, onAddUser: false, alert: { show: true, type: 'success', message: 'Tenant successfully created!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, users: action.payload!.users, usersCount: action.payload!.users!.length, onAddUser: false, onEditUser: true, user: action.payload!.user, alert: { show: true, type: 'success', message: 'User successfully created!' }, actionButtonState: action.payload!.actionButtonState\n            };\n\n        case 'CreateUserFailure':\n            //goal here is to set alert to show failure to create\n            return {\n                ...state, alert: { show: true, type: 'danger', message: `Could not create user: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'BeforeDeleteUser':\n            //goal here is to set alert and/or is-loading button to show deleting user message\n            return {\n                ...state, alert: { show: true, type: 'info', message: 'Deleting user. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'DeleteUserSuccess':\n            //goal here is to remove deleted user from state\n            /*\n            const currentUsers = state.users;\n            //find the index corresponding to the user with the passed id\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\n            currentUsers!.splice(index, 1);\n            //decrement users count\n            const newUsersCount = state.usersCount!-- \n            */\n            return {\n                //...state, onViewUser: false, users: currentUsers, usersCount: newUsersCount, alert: { show: true, type: 'success', message: 'User successfully deleted!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, onViewUser: false, users: action.payload!.users, usersCount: action.payload!.users!.length, alert: { show: true, type: 'success', message: 'User successfully deleted!' }, actionButtonState: action.payload!.actionButtonState\n            };\n\n        case 'DeleteUserFailure':\n            //goal here is to set alert to show failure to delete\n            return {\n                ...state, onViewUser: false, alert: { show: true, type: 'danger', message: `Could not delete user: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'BeforeUpdateUser':\n            //goal here is to set alert to show updating user message\n            return {\n                ...state, alert: { show: true, type: 'info', message: 'Updating user. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleCancelUpdate':\n            return {\n                ...state, onEditUser: false\n            };\n        case 'HandleEditUser': {\n            //goal here is to find the tenant to be edited and set the user in state to be edited\n            const currentUsers = state.users;\n\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\n            const user = currentUsers![index];\n            return {\n                ...state, onEditUser: true, user: user, onAddUser: false, alert: { ...state.alert, show: false }\n            };\n        };\n        case 'UpdateUserSuccess':\n            //goal here is to update state with tenant updated\n            /*\n            const currentUsers = state.users;\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.user!.id);\n            //now change the value for that user in state\n            currentUsers![index] = action.payload!.user!;\n            */\n            return {\n                //...state, onViewUser: false, users: currentUsers, user: action.payload!.user!, onEditUser: false, alert: { show: true, type: 'success', message: 'User successfully updated!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, onViewUser: false, users: action.payload!.users, user: action.payload!.user!, onEditUser: false, alert: { show: true, type: 'success', message: 'User successfully updated!' }, actionButtonState: action.payload!.actionButtonState\n            };\n\n        case 'UpdateUserFailure':\n            //goal here is to set alert to show failure to update\n            return {\n                ...state, onViewUser: false, alert: { show: true, type: 'danger', message: `Could not update user: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleCloseAlert':\n            return {\n                ...state, alert: { show: false, message: '', type: '' }\n            };\n\n        //below are for relations\n        case 'AddRoleToUserSuccess':\n            //replace the user that has been updated with the one returned from server after update.\n            //goal here is to update state with tenant updated\n            const currentUsers = state.users;\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.user!.id);\n            //now change the value for that user in state\n            currentUsers![index] = action.payload!.user!;\n            return {\n                ...state, users: currentUsers, user: action.payload!.user!, alert: { show: true, type: 'success', message: 'User successfully added to user!' }, actionButtonState: action.payload!.actionButtonState\n            };\n\n        default:\n            return state; //return state as is if the action type indicated is not handled\n    }//close switch statement\n\n}\nexport default reducer;","import { IFindOptions } from \"../../global/app.interfaces\";\nimport { IAction } from \"../app.interfaces\";\n\n//function to fetch data\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\n//findOptions defaults to empty {}\nexport const handleReadUsers = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\n    try {\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\n      //when we serve both the client react application and the backend from the same domain.\n      const response = await fetch(`/v1/users?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\n      \n      if (!response.ok) throw new Error(response.statusText);\n\n      const data = await response.json();\n      //set in state  \n      dispatch({type: 'FetchDataSuccess', payload: {usersCount: data[1], users: data[0]}})\n    } catch (error) {\n      //set state\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\n    }\n  };\n","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../../global/app.settings\";\nimport { IAction, IUser } from \"../../app.interfaces\";\n\nexport const handleUpdateUser = async (editedUser: IUser, currentUsers: IUser[], dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    //Of course, this alert will only flash if it takes very minimal time to create item\n    dispatch({ type: 'BeforeUpdateUser', payload: { actionButtonState: 'is-loading' } })\n    //let's try to write to backend\n    try {\n        const response = await fetch(`/v1/users`,\n            {\n                method: 'PUT',//notice the method\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(editedUser) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n        await response.json();\n        //dispatch to state\n        const index = currentUsers!.findIndex((user) => user.id === editedUser.id);\n        //now change the value for that user in state\n        currentUsers![index] = editedUser!;\n        dispatch({ type: 'UpdateUserSuccess', payload: { user: editedUser, users: currentUsers, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    } catch (error) {\n        dispatch({ type: 'UpdateUserFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    }\n\n}","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../global/app.settings\";\nimport { IAction, IUser } from \"../app.interfaces\";\n\nexport const handleDeleteUser = async (id: number | string, currentUsers: IUser[], dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    dispatch({ type: 'BeforeDeleteUser', payload: { actionButtonState: 'is-loading' } });\n    try {\n        const response = await fetch(`/v1/users/${id}`, //note this URL\n            {\n                method: 'DELETE'\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed!\n        \n        //remove user from current state received in this function and to be dispatched\n        //find the index corresponding to the user with the passed id\n        const index = currentUsers!.findIndex((user) => user.id === id);\n        currentUsers!.splice(index, 1);\n        //dispatch({ type: 'DeleteUserSuccess', payload: { id: id, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n        dispatch({ type: 'DeleteUserSuccess', payload: { id: id, users: currentUsers, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    } catch (error) {\n        //problem deleting from backend\n        dispatch({ type: 'DeleteUserFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    }\n}\n","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../global/app.settings\";\nimport { IAction, IUser } from \"../app.interfaces\";\n\n//function that handles Create User\nexport const handleCreateUser = async (userToCreate: IUser, currentUsers: IUser[], dispatch: React.Dispatch<IAction>) => {\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating user ...'\n    dispatch({ type: 'BeforeCreateUser', payload: { actionButtonState: 'is-loading' } });\n    //let's try to write to backend\n    //alert(JSON.stringify(userToCreate))\n    try {\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\n        const response = await fetch(`/v1/users`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userToCreate) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n        //Response is ok. Proceed!\n        const userCreated: IUser = await response.json();\n\n        //update the current users before dispatch\n        currentUsers.push(userCreated);\n        //useReducer to dispatch successful user creation, sending userCreated as payload.\n        //dispatch({ type: 'CreateUserSuccess', payload: { user: userCreated, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n        dispatch({ type: 'CreateUserSuccess', payload: { user: userCreated, users: currentUsers, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n    } catch (error) {\n        //dispatch error to state for display\n        dispatch({ type: 'CreateUserFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n    }\n}","/** This component is for displaying each item in the record, passed to it from UserList */\nimport React, { useContext } from 'react';\nimport { IUser } from '../app.interfaces';\nimport { AppContext } from '../UserApp';\n\ntype Props = {\n    user: IUser,\n}\n\nconst User: React.FC<Props> = ({user}) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteUser = () => {\n        appContext!.handleDeleteUser!(user.id, appContext!.currentUsers, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditUser = () => {\n        //appContext!.handleEditUser!(user.id, appContext!.dispatch); //notice here that we are invoking the handleEditUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditUser', payload: {id: user.id} });\n    };\n\n    const onViewUser = () => {\n        appContext!.dispatch({type: 'HandleViewUser', payload: {user}})\n    }\n\n    return (\n        <tr>\n            <td>{user.firstName}</td>\n            <td>{user.lastName}</td>\n            <td>{user.commonName}</td>\n            <td>{user.gender}</td>\n            <td>{user.primaryEmailAddress}</td>\n            <td>{user.landlord? 'Yes' : 'No'}</td>\n            <td>\n                \n                <div className=\"buttons are-small\">\n                    <button className=\"button is-link\" onClick={onViewUser}>View Detail</button>\n                    <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\n                </div>\n                \n            </td>\n            \n        </tr>\n    );\n}\n\nexport default User;\n","/** Table header. We are separating this from TenantList just in case it has to carry out\n * some specific tasks like firing sort event based on the header column clicked.\n*/\nimport React from 'react';\n\n\nconst RoleListHeader: React.FC = () => {\n\n  return (\n    <thead>\n      <tr>\n          <th>Firstname</th>\n          <th>Lastname</th>\n          <th>Common name</th>\n          <th>Gender</th>\n          <th>Primary Email</th>\n          <th>Landlord?</th>\n          <th>Action</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default RoleListHeader;\n","import React from 'react';\nimport { IUser } from '../app.interfaces';\nimport User from './User';\nimport UserListHeader from './UserListHeader';\n\n\n//declare type for Props passed to this \ntype Props = {\n    users: IUser[],\n}\n\nconst UserList: React.FC<Props> = (props) => {\n\n    //prepare users for display in a table\n    let userListRows:any = null;\n    \n    userListRows = props.users.map((user) => {\n        return <User user={user} key={user.id}/>\n    })\n    \n\n    return (\n        <table className=\"table is-striped is-narrow is-hoverable\" >\n            <caption><h3>Available users</h3></caption>\n            <UserListHeader />\n            <tbody>\n                {userListRows}\n            </tbody>\n        </table>\n    );\n}\n\nexport default UserList;\n","/** This component is for displaying each user in the record, passed to it from UserList */\nimport React, { useState } from 'react';\nimport { Gender, IAction, IUser } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    handleCreateUser: Function,\n    currentUsers: IUser[],\n    dispatch: React.Dispatch<IAction>\n}\n\ntype IState = {\n    user: IUser\n}\n\nconst AddUser: React.FC<Props> = (props) => {\n\n    const initialState: IState = {\n        /*\n        user: {\n            //fields for first page of add new.\n            landlord: false,\n            firstName: '',\n            middleName: '',\n            lastName: '',\n            commonName: '',\n            homeAddress: '',\n            gender: Gender.F,\n            dateOfBirth: new Date(),\n            nationality: '',\n            stateOfOrigin: '',\n            zip: '',\n            isActive: true,\n            primaryEmailAddress: '',\n            backupEmailAddress: '',\n            //passwordSalt: '',\n            passwordHash: '',\n            isPasswordChangeRequired: false,\n            phone: { mobile: [], office: [], home: [] },\n            /* fields involving after creation, at edit time. Hence commented out\n            photo: undefined,\n            photoMimeType: '',\n            isPrimaryEmailAddressVerified: false,\n            isBackupEmailAddressVerified: false,\n            resetPasswordToken: '',\n            resetPasswordExpiration: new Date(),\n            primaryEmailVerificationToken: '',\n            backupEmailVerificationToken: '',\n            emailVerificationTokenExpiration: new Date(),\n            otpEnabled: false,\n            otpSecret: '',\n            roles: [],\n            primaryContactForWhichTenants: [],\n            tenantTeamMemberships: [],\n            accountOfficerForWhichTenants: []\n            */\n\n        //}\n        user:{\n            //Not really necessary to put all except the fields that have children to be referenced in form\n            phone:{\n                office:[], \n                mobile:[], \n                home:[]\n            },\n            roles: []\n        }\n\n    }\n\n    //declare the state variable for user to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [state, setState] = useState<IState>({ ...initialState });\n\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser[target.name] = target.value;\n        setState({ ...state, user: currentUser });//checkin the modified user state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        //alert('about to call handleCreateUser')\n        props.handleCreateUser(state.user, props.currentUsers, props.dispatch);//call the handleAddUser function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelCreate' })\n    }\n\n    const handleLandlordCheckbox = () => {\n        //toggle choice in state\n        const landlord = state.user.landlord ? false : true\n        setState({ ...state, user: { ...state.user, landlord } })\n    }\n\n    const officePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.office![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const officePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.office![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const mobilePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.mobile![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const mobilePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.mobile![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const homePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.home![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const homePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.home![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"box\">\n                <div className=\"columns is-mobile\">\n                    <h2>Add User</h2>\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Landlord?</label>\n                                <div className=\"control\">\n                                    <input type=\"checkbox\" name=\"landlord\" value=\"\" checked={state.user.landlord} onChange={handleLandlordCheckbox} />\n                                </div>\n                            </div>\n                            <div className=\"field is-horizontal\">\n                                <div className=\"field-label is-normal\">\n                                    <label className=\"label\">Login information</label>\n                                </div>\n                                <div className=\"field-body\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Primary Email Address</label>\n                                        <div className=\"control\">\n                                            <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.user.primaryEmailAddress} onChange={onChange} required />\n                                        </div>\n                                        <p className=\"help\">The email address should not be more than 30 letters</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Password</label>\n                                        <div className=\"control\">\n                                            <input name=\"passwordHash\" className=\"input\" type=\"password\" placeholder=\"Enter password here\" maxLength={128} value={state.user.passwordHash} onChange={onChange} required />\n                                        </div>\n                                        <p className=\"help\">The password should not be more than 128 letters</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">First Name</label>\n                                <div className=\"control\">\n                                    <input name=\"firstName\" className=\"input\" type=\"text\" placeholder=\"Enter first name here\" maxLength={30} value={state.user.firstName} onChange={onChange} required />\n                                </div>\n                                <p className=\"help\">The first name should not be more than 30 letters</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Last Name</label>\n                                <div className=\"control\">\n                                    <input name=\"lastName\" className=\"input\" type=\"text\" placeholder=\"Enter last name here\" maxLength={30} value={state.user.lastName} onChange={onChange} required />\n                                </div>\n                                <p className=\"help\">The last name should not be more than 30 letters</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Middle Name</label>\n                                <div className=\"control\">\n                                    <input name=\"middleName\" className=\"input\" type=\"text\" placeholder=\"Enter middle name here\" maxLength={30} value={state.user.middleName} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">Even though optional, it is advisable to enter middle name</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Common Name</label>\n                                <div className=\"control\">\n                                    <input name=\"commonName\" className=\"input\" type=\"text\" placeholder=\"Enter common name here\" maxLength={20} value={state.user.commonName} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">What is the user commonly called. The common name should not be more than 20 letters</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Gender</label>\n                                <div className=\"control\">\n                                    <div className=\"select\">\n                                        <select name=\"gender\" value={state.user.gender} onChange={onChange}>\n                                            <option value=\"notSelected\">Select Gender</option>\n                                            <option value={Gender.F}>Female</option>\n                                            <option value={Gender.M}>Male</option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <p className=\"help\">Select the Gender</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Date of Birth</label>\n                                <div className=\"control\">\n                                    <input name=\"dateOfBirth\" id=\"dateOfBirth\" className=\"input\" type=\"date\"\n                                        required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max={new Date().toLocaleString()} value={state.user.dateOfBirth?.toLocaleString()} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">The date of birth of the user. Pattern of entry is YYYY-MM-DD</p>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Home Address</label>\n                                <div className=\"control\">\n                                    <textarea name=\"homeAddress\" className=\"input\" rows={6} placeholder=\"Enter home address here\" maxLength={100} value={state.user.homeAddress} onChange={onChange}></textarea>\n                                </div>\n                                <p className=\"help\">The home address should not be more than 100 letters</p>\n                            </div>\n                            <div className=\"field is-horizontal\">\n                                <div className=\"field-label is-normal\">\n                                    <label className=\"label\">Phone numbers</label>\n                                </div>\n                                <div className=\"field-body\">\n                                    <div className=\"control\">\n                                        <label className=\"label\">Office</label>\n                                        <input name=\"office-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter office phone 1 here\" maxLength={10} value={state.user.phone!.office![0]} onChange={officePhone1Change} />\n                                        <input name=\"office-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter office phone 2 here\" maxLength={10} value={state.user.phone!.office![1]} onChange={officePhone2Change} disabled={state.user.phone!.office![0] === undefined || state.user.phone!.office![0] === '' ? true : false} />\n                                    </div>\n                                    <div className=\"control\">\n                                        <label className=\"label\">Mobile</label>\n                                        <input name=\"mobile-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter mobile phone 1 here\" maxLength={10} value={state.user.phone!.mobile![0]} onChange={mobilePhone1Change} />\n                                        <input name=\"mobile-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter mobile phone 2 here\" maxLength={10} value={state.user.phone!.mobile![1]} onChange={mobilePhone2Change} disabled={state.user.phone!.mobile![0] === undefined || state.user.phone!.mobile![0] === '' ? true : false} />\n                                    </div>\n                                    <div className=\"control\">\n                                        <label className=\"label\">Home</label>\n                                        <input name=\"home-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter home phone 1 here\" maxLength={10} value={state.user.phone!.home![0]} onChange={homePhone1Change} />\n                                        <input name=\"home-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter home phone 2 here\" maxLength={10} value={state.user.phone!.home![1]} onChange={homePhone2Change} disabled={state.user.phone!.home![0] === undefined || state.user.phone!.home![0] === '' ? true : false} />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Nationality</label>\n                                <div className=\"control\">\n                                    <input name=\"nationality\" className=\"input\" type=\"text\" placeholder=\"Enter nationality here\" maxLength={30} value={state.user.nationality} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">The nationality should not be more than 30 letters</p>\n                            </div>\n\n                            <div className=\"field\">\n                                <label className=\"label\">State</label>\n                                <div className=\"control\">\n                                    <input name=\"stateOfOrigin\" className=\"input\" type=\"text\" placeholder=\"Enter state here\" maxLength={30} value={state.user.stateOfOrigin} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">The state should not be more than 30 letters</p>\n                            </div>\n\n                            <div className=\"field\">\n                                <label className=\"label\">Zip code</label>\n                                <div className=\"control\">\n                                    <input name=\"zip\" className=\"input\" type=\"text\" placeholder=\"Enter zip code here\" maxLength={6} value={state.user.zip} onChange={onChange} />\n                                </div>\n                                <p className=\"help\">The zip code should not be more than 6 letters</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"columns is-mobile\">\n                    <div className=\"field is-grouped\">\n                        <div className=\"control\">\n                            <button className=\"button is-link\">Submit</button>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n\n    );\n}\n\nexport default AddUser;\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { API_VERSION_URL, DEFAULT_ACTION_BUTTON_STATE } from \"../../../global/app.settings\";\nimport { IEditUserState, IRole, TenantTeamRole } from \"../../app.interfaces\";\n\nexport class RelationsHandlers {\n\n    /**\n     * Called from EditRoles useEffect to get roles that will be in dropdown for selection\n     * When successful, the roles in relationsState will be set accordingly and be available for selection\n     * in order to add roles.\n     * @param state \n     * @param setState \n     */\n    public static getAssignableRoles = async (state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n\n        try {\n            const response = await fetch(`${API_VERSION_URL}/roles`,\n                {\n                    method: 'GET',//notice the method\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the server returns an array of Roles along with count.\n\n            //filter out roles that user already has and also considering whether user/role is landlord or not\n            let assignableRoles: IRole[] = [];\n            data[0].map((role: IRole) => {\n                //check landlord status congruence\n                if (state.user.landlord === role.landlord) {\n                    //check to see if the user already has the role. Only show if user does not have the role\n                    const index = state.user.roles!.findIndex((assignedRole) => assignedRole.id === role.id);\n                    if (index === -1)//if not found index of -1 is returned.\n                        assignableRoles.push(role);\n                }\n            })\n            setState({ ...state, relations: { ...state.relations, assignableRoles } });\n        } catch (error) {\n            //strange error\n            console.log(error);\n\n        }\n    }\n\n\n    /**\n     * This is for compositing the roleIds of roles to be added to user. Called from EditUser\n     * @param userId \n     * @param roleIds \n     * @param state \n     * @param setState \n     */\n    public static addRolesById = async (userId: number, roleIds: number[], state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        //The query should contain an array of roleIds in query key named roleid e.g. ?roleid=1&roleid=2&roleid=3...\n        let query: string = '';\n        for (const roleId of roleIds) {\n            query += `roleid=${roleId}&`\n        }\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, submitButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${userId}/roles?${query}`,\n                {\n                    method: 'PATCH',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    }\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user roles.\n\n            setState({ ...state, user: { ...state.user, roles: data }, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n            console.log(error);\n        }\n    }\n\n    public static removeRoleFromUser = async (roleId: number, state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, deleteButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${state.user.id}/roles/${roleId}`,\n                {\n                    method: 'DELETE',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    }\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user roles.\n\n            setState({ ...state, user: { ...state.user, roles: data }, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, deleteButtonState: 'delete' } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, deleteButtonState: 'delete' } } })\n            console.log(error);\n        }\n\n    }\n\n    public static setAsPrimaryContactForATenantByTenantUniqueName = async (uniqueNameOfTenantToAdd: string, state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, submitButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${state.user.id}/primary-contact-for-by-unique-name/${uniqueNameOfTenantToAdd}`,\n                {\n                    method: 'PATCH',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    }\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user primaryContactForWhichTenants.\n\n            //alert(JSON.stringify(data))\n\n            setState({ ...state, user: { ...state.user, primaryContactForWhichTenants: data }, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n            console.log(error);\n            alert(error)\n        }\n\n    }\n\n    public static removeAsPrimaryContactForATenantByTenantId = async (tenantId: number, state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, deleteButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${state.user.id}/primary-contact-for/${tenantId}`,\n                {\n                    method: 'DELETE',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    }\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user primaryContactForWhichTenants.\n\n            setState({ ...state, user: { ...state.user, primaryContactForWhichTenants: data }, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, deleteButtonState: 'delete' } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, deleteButtonState: 'delete' } } })\n            console.log(error);\n            alert(error)\n        }\n    }\n\n    public static setTenantTeamMembershipByTenantUniqueName = async (uniqueNameOfTenantToAdd: string, rolesToAdd: TenantTeamRole[], state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, submitButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${state.user.id}/team-membership-by-uniqueName/${uniqueNameOfTenantToAdd}`,\n                {\n                    method: 'PATCH',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(rolesToAdd)//received in a dto on the server\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user tenantTeamMemberships.\n\n            //alert(JSON.stringify(data))\n\n            setState({ ...state, user: { ...state.user, tenantTeamMemberships: data }, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, submitButtonState: DEFAULT_ACTION_BUTTON_STATE } } })\n            console.log(error);\n            alert(error)\n        }\n    }\n\n    public static deleteTenantTeamMemberShipById = async (tenantId: number, state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //Add is-loading to submit button\n            setState({ ...state, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, deleteButtonState: 'is-loading' } } })\n            const response = await fetch(`${API_VERSION_URL}/users/${state.user.id}/team-membership/${tenantId}`,\n                {\n                    method: 'DELETE',//notice the method\n                    headers: {\n                        //'Content-Type': 'application/json'\n                    }\n\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n            const data = await response.json(); //the data returned from server is an array of user primaryContactForWhichTenants.\n\n            setState({ ...state, user: { ...state.user, tenantTeamMemberships: data }, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, deleteButtonState: 'delete' } } })\n\n        } catch (error) {\n            //simply reset the button state\n            setState({ ...state, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, deleteButtonState: 'delete' } } })\n            console.log(error);\n            //alert(error)\n        }\n    }\n\n    /**\n     * Called from EditUser to submit photo selected for a user\n     * @param userId \n     * @param data \n     * @param relationsState \n     * @param setRelationsState \n     */\n    public static submitPhoto = async (userId: number, data: FormData, state: IEditUserState, setState: React.Dispatch<React.SetStateAction<IEditUserState>>) => {\n        try {\n            //show loading sign on submit button\n            setState({ ...state, relations: { ...state.relations, photo: { ...state.relations.photo, uploadButtonState: 'is-loading' } } })\n            const response = await fetch(`/v1/users/${userId}/photo`,\n                {\n                    method: 'POST',\n                    //don't use below, else you have to have a way to add boundary between multiparts. Let the browser detect and do that automatically\n                    //headers: {\n                    //    'Content-Type': 'multipart/form-data'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                    //},\n                    body: data\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n            //Response is ok. Proceed!\n            //clear loading sign and fileToUpload. Set browser img src with date query to clear cache\n            setState({ ...state, relations: { ...state.relations, photo: { ...state.relations.photo, src: `${state.relations.photo.src}?&${Date.now()}`, fileToUpload: '', uploadButtonState: '' } } })\n        } catch (error) {\n            setState({ ...state, relations: { ...state.relations, photo: { ...state.relations.photo, alert: { show: true, type: 'danger', message: `photo upload failed: ${error.message}` } } } })\n        }\n    }\n\n\n\n}","/** This component is for displaying each user in the record, passed to it from UserList */\nimport React, { useEffect, useState } from 'react';\nimport { DEFAULT_ACTION_BUTTON_STATE } from '../../global/app.settings';\nimport { Gender, IAction, IEditUserState, IRole, ITenant, ITenantTeam, IUser, TenantTeamRole } from '../app.interfaces';\nimport { RelationsHandlers } from '../crud-handlers/update/relations-handlers';\n//Below is for role select control. Requires npm install react-select @types/react-select\n//import Select from 'react-select'; //I am handling multiple select the raw javascript way for now\n\n//create the type for the anticipated props to be passed from parent component UserApp\ntype Props = {\n    user: IUser,\n    handleUpdateUser: Function,\n    currentUsers: IUser[],\n    dispatch: React.Dispatch<IAction>\n}\n\n//Below is for User roles display. Could have been in another file\ntype UserRolesDisplayProps = {\n    role: IRole,\n    state: IEditUserState,\n    setState: React.Dispatch<React.SetStateAction<IEditUserState>>\n}\n\n//This could be in an entirely different file\nconst UserRolesDisplay: React.FC<UserRolesDisplayProps> = ({ role, state, setState }) => {\n\n    const removeRoleFromUser = (roleId: number) => {\n        //TODO: Here, I will have to invoke the static method in relationsHandlers\n        RelationsHandlers.removeRoleFromUser(roleId, state, setState);\n    }\n\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                <button className={state.relations.userRoles.deleteButtonState} onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) removeRoleFromUser(role.id!) }}></button>\n                {role.name}\n            </div>\n        </div>\n\n    )\n}\n\n//Below is for User primary contact for tenants display. Could have been in another file\ntype PrimaryContactForTenantDisplayProps = {\n    tenant: ITenant,\n    state: IEditUserState,\n    setState: React.Dispatch<React.SetStateAction<IEditUserState>>\n}\nconst PrimaryContactForWhichTenantsDisplay: React.FC<PrimaryContactForTenantDisplayProps> = ({ tenant, state, setState }) => {\n    const removeAsPrimaryContactForATenantByTenantId = (tenantId: number) => {\n        RelationsHandlers.removeAsPrimaryContactForATenantByTenantId(tenantId, state, setState);\n    }\n\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                <button className={state.relations.primaryContactForWhichTenants.deleteButtonState} onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) removeAsPrimaryContactForATenantByTenantId(tenant.id!) }}></button>\n                {tenant.uniqueName}\n            </div>\n        </div>\n\n    )\n}\n//TODO type for TenantTeamMembershipsDisplayProps\n//Below is for User primary contact for tenants display. Could have been in another file\ntype TenantTeamMembershipsDisplayProps = {\n    tenantTeam: ITenantTeam, //tenantteam contains roles and name of tenant\n    state: IEditUserState,\n    setState: React.Dispatch<React.SetStateAction<IEditUserState>>\n}\nconst TenantTeamMembershipsDisplay: React.FC<TenantTeamMembershipsDisplayProps> = ({ tenantTeam, state, setState }) => {\n    const deleteTenantTeamMemberShipById = (tenantId: number) => {\n        RelationsHandlers.deleteTenantTeamMemberShipById(tenantId, state, setState);\n    }\n\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                <button className={state.relations.tenantTeamMemberships.deleteButtonState} onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) deleteTenantTeamMemberShipById(tenantTeam.tenantUniqueId!) }}></button>\n                {tenantTeam.tenantUniqueName}\n            </div>\n            <div className=\"column\">\n                <div>Roles:</div>\n                {tenantTeam.roles!.map((role) => {//iterate through roles\n                    return `${role} ` //display the role. TODO: make team membership role removable\n                })}\n            </div>\n        </div>\n\n    )\n}\n\n\n//main component here\nconst EditUser: React.FC<Props> = ({ user, handleUpdateUser, currentUsers, dispatch }) => {\n\n    const initialState: IEditUserState = {\n        user: {\n            id: user.id,\n            landlord: user.landlord,\n            firstName: user.firstName,\n            middleName: user.middleName,\n            lastName: user.lastName,\n            commonName: user.commonName,\n            homeAddress: user.homeAddress,\n            gender: user.gender,\n            dateOfBirth: user.dateOfBirth,\n            nationality: user.nationality,\n            stateOfOrigin: user.stateOfOrigin,\n            zip: user.zip,\n            isActive: user.isActive,\n            primaryEmailAddress: user.primaryEmailAddress,\n            backupEmailAddress: user.backupEmailAddress,\n            //passwordSalt: '',\n            //passwordHash: user.passwordHash,\n            isPasswordChangeRequired: user.isPasswordChangeRequired,\n            phone: user.phone || { mobile: [], office: [], home: [] }, //in case phone is null, the || is used for alternative so that the render does not fail as it references the inner arrays\n            /* fields involving after creation, at edit time. */\n            photo: user.photo,\n            photoMimeType: user.photoMimeType,\n            isPrimaryEmailAddressVerified: user.isPrimaryEmailAddressVerified,\n            isBackupEmailAddressVerified: user.isBackupEmailAddressVerified,\n            //resetPasswordToken: '',\n            //resetPasswordExpiration: new Date(),\n            //primaryEmailVerificationToken: '',\n            //backupEmailVerificationToken: '',\n            //emailVerificationTokenExpiration: new Date(),\n            otpEnabled: user.otpEnabled,\n            //otpSecret: '',\n            roles: user.roles,\n            primaryContactForWhichTenants: user.primaryContactForWhichTenants,\n            tenantTeamMemberships: user.tenantTeamMemberships,\n            accountOfficerForWhichTenants: user.accountOfficerForWhichTenants\n        },\n        relations: {//line up relations related state variables here\n            assignableRoles: [], //for the roles drop down for add roles\n            tenants: [], //for the tenants drop down for associating with tenants. May not use this because the tenant list could be too long. Better to enter name and let the server find it and associate.\n            photo: { //all about photo upload and img src.\n                fileToUpload: \"\",\n                uploadButtonState: \"\",\n                alert: {\n                    show: false,\n                    type: undefined,\n                    message: \"\"\n                },\n                src: `/v1/users/${user.id}/photo`,\n            },\n            userRoles: { //for user roles to be added to user\n                rolesToAdd: [], //this is for adding one or more roles to user\n                submitButtonState: DEFAULT_ACTION_BUTTON_STATE,\n                deleteButtonState: 'delete'\n            },\n            primaryContactForWhichTenants: {\n                submitButtonState: DEFAULT_ACTION_BUTTON_STATE,\n                deleteButtonState: 'delete'\n            },\n            tenantTeamMemberships: {\n                submitButtonState: DEFAULT_ACTION_BUTTON_STATE,\n                deleteButtonState: 'delete',\n            }\n        }\n\n    }\n\n    //declare the state variables involved in component\n    const [state, setState] = useState<IEditUserState>({ ...initialState });\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser[target.name] = target.value;\n        setState({ ...state, user: currentUser });//checkin the modified user state\n    }\n\n    //function to handle user form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        handleUpdateUser(state.user, currentUsers, dispatch);//call the handleUpdateUser function passed via props.\n    }\n\n    //function to handle user form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        dispatch({ type: 'HandleCancelUpdate' })\n    }\n\n    const handleLandlordCheckbox = () => {\n        //toggle choice in state\n        const landlord = state.user.landlord ? false : true\n        setState({ ...state, user: { ...state.user, landlord } })\n    }\n\n    const officePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.office![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const officePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.office![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const mobilePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.mobile![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const mobilePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.mobile![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const homePhone1Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.home![0] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const homePhone2Change = (event: React.FormEvent) => {\n        const currentUser = state.user;//check out user in state as is\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentUser.phone!.home![1] = target.value;\n        setState({ ...state, user: currentUser })\n    }\n\n    const onPhotoChange = (event: any) => {\n        //setRelationsState({ ...relationsState, photo: { ...relationsState.photo, fileToUpload: event.target.files[0] } })\n        setState({ ...state, relations: { ...state.relations, photo: { ...state.relations.photo, fileToUpload: event.target.files[0] } } })\n    }\n\n    const onPhotoSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const data = new FormData();\n        data.append('file', state.relations.photo.fileToUpload);\n        RelationsHandlers.submitPhoto(state.user.id!, data, state, setState);\n    }\n\n    /* Add and remove roles section */\n    const onAddRolesChange = async (event: React.FormEvent) => {\n        event.preventDefault();\n        let target: any = document.getElementById('add-roles');\n        let roleIds = [];\n        let options = target && target.options;\n\n        for (const option of options) {\n            if (option.selected) {\n                roleIds.push(option.value)\n            }\n        }\n\n        setState({ ...state, relations: { ...state.relations, userRoles: { ...state.relations.userRoles, rolesToAdd: roleIds } } });\n\n    }\n\n    const onAddRolesSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        RelationsHandlers.addRolesById(user.id!, state.relations.userRoles.rolesToAdd!, state, setState);\n    }\n\n    /* Add and remove primary contact for which tenants section */\n\n    const onAddPrimaryContactForWhichTenantsChange = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        //set in state the uniqueName of tenant to find and add\n        setState({\n            ...state,\n            relations: {\n                ...state.relations,\n                primaryContactForWhichTenants: { ...state.relations.primaryContactForWhichTenants, uniqueNameOfTenantToAdd: target.value }\n            }\n        })\n    }\n\n    const onAddPrimaryContactForWhichTenantsSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        //invoke the handler\n        RelationsHandlers.setAsPrimaryContactForATenantByTenantUniqueName(state.relations.primaryContactForWhichTenants.uniqueNameOfTenantToAdd!, state, setState);\n    }\n\n    /* Add and remove tenant teams for which tenants section */\n\n    const onAddTenantTeamMembershipUniqueNameChange = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        //set in state the uniqueName of tenant to find and add\n        setState({\n            ...state,\n            relations: {\n                ...state.relations,\n                tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, uniqueNameOfTenantToAdd: target.value }\n            }\n        })\n    }\n\n    /* Add and remove roles section */\n    const onAddTenantTeamMembershipRolesChange = async (event: React.FormEvent) => {\n        event.preventDefault();\n        let target: any = document.getElementById('add-tenant-team-roles');\n        let roles: TenantTeamRole[] = [];\n        let options = target && target.options;\n\n        for (const option of options) {\n            if (option.selected) {\n                roles.push(option.value)\n            }\n        }\n        setState({ ...state, relations: { ...state.relations, tenantTeamMemberships: { ...state.relations.tenantTeamMemberships, rolesToAdd: roles } } });\n    }\n\n    const onAddTenantTeamMembershipSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        //invoke the handler\n        RelationsHandlers.setTenantTeamMembershipByTenantUniqueName(\n            state.relations.tenantTeamMemberships.uniqueNameOfTenantToAdd!,\n            state.relations.tenantTeamMemberships.rolesToAdd!,\n            state,\n            setState);\n    }\n\n\n    useEffect(() => {\n\n        //load roles needed for roles dropdown. This should include all roles excluding those the user already has\n        //alert('useEffect called');\n        RelationsHandlers.getAssignableRoles(state, setState)\n        // eslint-disable-next-line\n    }, [state.user.roles, state.user.landlord]);//call whenever user role  or landlord state changes\n\n\n    //prepare TenantTeamRole enum list\n    const tenantTeamRoleEnumValues = () => {\n        //iterate through the enum TenantTeamRole and get the values\n        let values: JSX.Element[] = [];\n\n        for (const value of Object.values(TenantTeamRole)) {\n            values.push(<option value={value}>{value}</option>)\n        }\n        /* Below will also work\n        Object.values(TenantTeamRole).forEach((value) => {\n            values.push( <option value={value}>{value}</option>)\n        });\n        */\n        return values\n\n    }\n    //Note where the above functions are used below within the return statement\n    return (\n        <div className=\"columns is\n        -mobile\">\n            <div className=\"column is-two-thirds\">\n                <form onSubmit={onSubmit}>\n                    <div className=\"box\">\n                        <div className=\"columns is-mobile\">\n                            <h2>Edit User</h2>\n                        </div>\n                        <div className=\"columns is-mobile\">\n                            <div className=\"column\">\n                                <div className=\"box\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Landlord?</label>\n                                        <div className=\"control\">\n                                            <input type=\"checkbox\" name=\"landlord\" value=\"\" checked={state.user.landlord} onChange={handleLandlordCheckbox} />\n                                        </div>\n                                    </div>\n                                    <div className=\"field is-horizontal\">\n                                        <div className=\"field-body\">\n                                            <div className=\"field\">\n                                                <label className=\"label\">Primary Email Address</label>\n                                                <div className=\"control\">\n                                                    <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.user.primaryEmailAddress} onChange={onChange} required />\n                                                </div>\n                                                <p className=\"help\">The email address should not be more than 30 letters</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">First Name</label>\n                                        <div className=\"control\">\n                                            <input name=\"firstName\" className=\"input\" type=\"text\" placeholder=\"Enter first name here\" maxLength={30} value={state.user.firstName} onChange={onChange} required />\n                                        </div>\n                                        <p className=\"help\">The first name should not be more than 30 letters</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Last Name</label>\n                                        <div className=\"control\">\n                                            <input name=\"lastName\" className=\"input\" type=\"text\" placeholder=\"Enter last name here\" maxLength={30} value={state.user.lastName} onChange={onChange} required />\n                                        </div>\n                                        <p className=\"help\">The last name should not be more than 30 letters</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Middle Name</label>\n                                        <div className=\"control\">\n                                            <input name=\"middleName\" className=\"input\" type=\"text\" placeholder=\"Enter middle name here\" maxLength={30} value={state.user.middleName} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">Even though optional, it is advisable to enter middle name</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Common Name</label>\n                                        <div className=\"control\">\n                                            <input name=\"commonName\" className=\"input\" type=\"text\" placeholder=\"Enter common name here\" maxLength={20} value={state.user.commonName} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">What is the user commonly called. The common name should not be more than 20 letters</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Gender</label>\n                                        <div className=\"control\">\n                                            <div className=\"select\">\n                                                <select name=\"gender\" value={state.user.gender} onChange={onChange}>\n                                                    <option value=\"notSelected\">Select Gender</option>\n                                                    <option value={Gender.F}>Female</option>\n                                                    <option value={Gender.M}>Male</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <p className=\"help\">Select the Gender</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Date of Birth: {new Date(state.user.dateOfBirth!).toLocaleDateString(\"en-GB\")}</label>\n                                        <div className=\"control\">\n                                            <input name=\"dateOfBirth\" id=\"dateOfBirth\" className=\"input\" type=\"date\"\n                                                pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max={new Date().toLocaleString()} value={state.user.dateOfBirth?.toLocaleString()} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">The date of birth of the user. Pattern of entry is YYYY-MM-DD</p>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Home Address</label>\n                                        <div className=\"control\">\n                                            <textarea name=\"homeAddress\" className=\"input\" rows={6} placeholder=\"Enter home address here\" maxLength={100} value={state.user.homeAddress} onChange={onChange}></textarea>\n                                        </div>\n                                        <p className=\"help\">The home address should not be more than 100 letters</p>\n                                    </div>\n                                    <div className=\"field is-horizontal\">\n                                        <div className=\"field-label is-normal\">\n                                            <label className=\"label\">Phone numbers</label>\n                                        </div>\n                                        <div className=\"field-body\">\n                                            <div className=\"control\">\n                                                <label className=\"label\">Office</label>\n                                                <input name=\"office-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter office phone 1 here\" maxLength={10} value={state.user.phone!.office![0]} onChange={officePhone1Change} />\n                                                <input name=\"office-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter office phone 2 here\" maxLength={10} value={state.user.phone!.office![1]} onChange={officePhone2Change} disabled={state.user.phone!.office![0] === undefined || state.user.phone!.office![0] === '' ? true : false} />\n                                            </div>\n                                            <div className=\"control\">\n                                                <label className=\"label\">Mobile</label>\n                                                <input name=\"mobile-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter mobile phone 1 here\" maxLength={10} value={state.user.phone!.mobile![0]} onChange={mobilePhone1Change} />\n                                                <input name=\"mobile-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter mobile phone 2 here\" maxLength={10} value={state.user.phone!.mobile![1]} onChange={mobilePhone2Change} disabled={state.user.phone!.mobile![0] === undefined || state.user.phone!.mobile![0] === '' ? true : false} />\n                                            </div>\n                                            <div className=\"control\">\n                                                <label className=\"label\">Home</label>\n                                                <input name=\"home-phone1\" className=\"input\" type=\"text\" placeholder=\"Enter home phone 1 here\" maxLength={10} value={state.user.phone!.home![0]} onChange={homePhone1Change} />\n                                                <input name=\"home-phone2\" className=\"input\" type=\"text\" placeholder=\"Enter home phone 2 here\" maxLength={10} value={state.user.phone!.home![1]} onChange={homePhone2Change} disabled={state.user.phone!.home![0] === undefined || state.user.phone!.home![0] === '' ? true : false} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Nationality</label>\n                                        <div className=\"control\">\n                                            <input name=\"nationality\" className=\"input\" type=\"text\" placeholder=\"Enter nationality here\" maxLength={30} value={state.user.nationality} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">The nationality should not be more than 30 letters</p>\n                                    </div>\n\n                                    <div className=\"field\">\n                                        <label className=\"label\">State</label>\n                                        <div className=\"control\">\n                                            <input name=\"stateOfOrigin\" className=\"input\" type=\"text\" placeholder=\"Enter state here\" maxLength={30} value={state.user.stateOfOrigin} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">The state should not be more than 30 letters</p>\n                                    </div>\n\n                                    <div className=\"field\">\n                                        <label className=\"label\">Zip code</label>\n                                        <div className=\"control\">\n                                            <input name=\"zip\" className=\"input\" type=\"text\" placeholder=\"Enter zip code here\" maxLength={6} value={state.user.zip} onChange={onChange} />\n                                        </div>\n                                        <p className=\"help\">The zip code should not be more than 6 letters</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"columns is-mobile\">\n                            <div className=\"field is-grouped\">\n                                <div className=\"control\">\n                                    <button className=\"button is-link\">Submit</button>\n                                </div>\n                                <div className=\"control\">\n                                    <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div className=\"column\">\n                <div className=\"columns\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <h5>Photo</h5>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <img alt=\"user\" src={`${state.relations.photo!.src}`} />\n                                </div>\n                            </div>\n                            <form className=\"columns\" onSubmit={onPhotoSubmit}>\n                                <div className=\"column\">\n                                    <div className=\"box\">\n                                        <h6>Upload photo</h6>\n                                        <div className=\"field\">\n\n                                            <div className=\"control\">\n                                                <input type=\"file\" name=\"file\" onChange={onPhotoChange} required />\n                                            </div>\n                                        </div>\n                                        <div className=\"field\">\n                                            {state.relations.photo.alert && alert}\n                                        </div>\n                                        <div className=\"field control\">\n                                            <button className={`button is-link is-small ${state.relations.photo.uploadButtonState}`} type=\"submit\" >Submit</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <h5>Assigned Roles</h5>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <div className=\"field\">\n                                        {state.user.roles! && state.user.roles!.length > 0 ?\n                                            state.user.roles!.map((role) => { return <UserRolesDisplay role={role} state={state} setState={setState} /> }) :\n                                            <div>No roles assigned to user yet</div>}\n                                    </div>\n                                </div>\n                            </div>\n                            {state.relations.assignableRoles!.length > 0 &&\n                                <form className=\"columns\" onSubmit={onAddRolesSubmit}>\n                                    <div className=\"column\">\n                                        <div className=\"box\">\n                                            <h6>Add roles</h6>\n                                            <div className=\"field\">\n                                                <select name=\"roles\" id=\"add-roles\" multiple className=\"control\" onChange={onAddRolesChange} style={{minWidth: '50%'}}>\n                                                    {state.relations.assignableRoles!.map((role) => {\n                                                        return <option value={role.id}>{role.name}</option>\n                                                    })}\n                                                </select>\n                                            </div>\n                                            <div className=\"field control\">\n                                                <button className={`button is-link is-small ${state.relations.userRoles.submitButtonState}`} type=\"submit\" >Submit</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>}\n                        </div>\n                    </div>\n                </div>\n                {!state.user.landlord &&\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"box\">\n                                <h5 className=\"label\">Primary contact for</h5>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <div className=\"field\">\n                                            {state.user.primaryContactForWhichTenants! && state.user.primaryContactForWhichTenants!.length > 0 ?\n                                                state.user.primaryContactForWhichTenants!.map((tenant) => { return <PrimaryContactForWhichTenantsDisplay tenant={tenant} state={state} setState={setState} /> }) :\n                                                <div>Not a primary contact for any tenant</div>}\n                                        </div>\n                                    </div>\n                                </div>\n                                <form className=\"columns\" onSubmit={onAddPrimaryContactForWhichTenantsSubmit}>\n                                    <div className=\"column\">\n                                        <div className=\"box\">\n                                            <h6 className=\"label\">Add tenant</h6>\n                                            <div className=\"field\">\n                                                <label className=\"label\">Unique tenant name:</label>\n                                                <input className=\"control\" type=\"text\" name=\"uniqueName\" placeholder=\"Unique name here\" onChange={onAddPrimaryContactForWhichTenantsChange} />\n                                            </div>\n                                            <div className=\"field control\">\n                                                <button className={`button is-link is-small ${state.relations.primaryContactForWhichTenants.submitButtonState}`} type=\"submit\" >Submit</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                }\n                {!state.user.landlord &&\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"box\">\n                                <h5>Tenant Team Membership for</h5>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <div className=\"field\">\n                                            {state.user.tenantTeamMemberships! && state.user.tenantTeamMemberships!.length > 0 ?\n                                                state.user.tenantTeamMemberships!.map((tenantTeam) => { return <TenantTeamMembershipsDisplay tenantTeam={tenantTeam} state={state} setState={setState} /> }) :\n                                                <div>Not a team member of any tenant</div>}\n                                        </div>\n                                    </div>\n                                </div>\n                                <form className=\"columns\" onSubmit={onAddTenantTeamMembershipSubmit}>\n                                    <div className=\"column\">\n                                        <div className=\"box\">\n                                            <h6>Add tenant</h6>\n                                            <div className=\"field\">\n                                                <label className=\"label\">Unique tenant name:</label>\n                                                <input className=\"control\" type=\"text\" name=\"uniqueName\" placeholder=\"Unique name here\" onChange={onAddTenantTeamMembershipUniqueNameChange} />\n                                            </div>\n                                            <div className=\"field\">\n                                                <label className=\"label\">Roles as a team member:</label>\n                                                <select name=\"add-tenant-team-roles\" id=\"add-tenant-team-roles\" multiple className=\"control\" style={{minWidth: '50%'}} onChange={onAddTenantTeamMembershipRolesChange}>\n                                                    {tenantTeamRoleEnumValues()}\n                                                </select>\n                                            </div>\n                                            <div className=\"field control\">\n                                                <button className={`button is-link is-small ${state.relations.tenantTeamMemberships.submitButtonState}`} type=\"submit\" >Submit</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                }\n                {state.user.landlord &&\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"box\">\n                                <div className=\"field\">\n                                    <label className=\"label\">Account Officer For:</label>\n                                    {state.user.accountOfficerForWhichTenants! && state.user.accountOfficerForWhichTenants!.length > 0 ? state.user.accountOfficerForWhichTenants!.entries : <div>Not an account officer</div>}\n                                    <div className=\"control\">\n                                        <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Make an account officer</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>}\n\n            </div>\n        </div>\n    );\n}\n\nexport default EditUser;\n","/** This component is for displaying each item in the record, passed to it from UserList */\nimport React, { useContext } from 'react';\nimport { IRole, ITenant, ITenantTeam, IUser } from '../app.interfaces';\nimport { AppContext } from '../UserApp';\n\ntype Props = {\n    user: IUser,\n}\n\ntype UserRolesDisplayProps = {\n    role: IRole,\n}\n\nconst UserRolesDisplay: React.FC<UserRolesDisplayProps> = ({ role }) => {\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                {role.name}\n            </div>\n        </div>\n    )\n}\n\ntype PrimaryContactForTenantDisplayProps = {\n    tenant: ITenant,\n}\nconst PrimaryContactForWhichTenantsDisplay: React.FC<PrimaryContactForTenantDisplayProps> = ({ tenant }) => {\n\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                {tenant.uniqueName}\n            </div>\n        </div>\n\n    )\n}\n\ntype TenantTeamMembershipsDisplayProps = {\n    tenantTeam: ITenantTeam, //tenantteam contains roles and name of tenant\n}\nconst TenantTeamMembershipsDisplay: React.FC<TenantTeamMembershipsDisplayProps> = ({ tenantTeam }) => {\n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                {tenantTeam.tenantUniqueName}\n            </div>\n            <div className=\"column\">\n                <div>Roles:</div>\n                {tenantTeam.roles!.map((role) => {//iterate through roles\n                    return `${role} ` //display the role. TODO: make team membership role removable\n                })}\n            </div>\n        </div>\n\n    )\n}\n\n\n\nconst ViewUser: React.FC<Props> = ({ user }) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteUser = () => {\n        appContext!.handleDeleteUser!(user.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditUser = () => {\n        //appContext!.handleEditUser!(user.id, appContext!.dispatch); //notice here that we are invoking the handleEditUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditUser', payload: { id: user.id } });\n    };\n\n    const onClickCloseButton = () => {\n        appContext!.dispatch({ type: 'HandleCloseViewUser' })\n    }\n\n    return (\n        <div className=\"modal modal-full-screen modal-fx-fadeInScale is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">{`Details of ${user.firstName}`}</p>\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton} />\n                </header>\n                <section className=\"modal-card-body\">\n                    {/*<!-- Content ... -->*/}\n                    <div className=\"columns\">\n                        <div className=\"column is-two-thirds\">\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    First name:\n                                </div>\n                                <div className=\"column\">\n                                    {user.firstName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Last name:\n                                </div>\n                                <div className=\"column\">\n                                    {user.lastName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Middle name:\n                                </div>\n                                <div className=\"column\">\n                                    {user.middleName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Common name:\n                                </div>\n                                <div className=\"column\">\n                                    {user.commonName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Gender:\n                                </div>\n                                <div className=\"column\">\n                                    {user.gender}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Home address:\n                                </div>\n                                <div className=\"column\">\n                                    {user.homeAddress}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Phone numbers:\n                                </div>\n                                <div className=\"column\">\n                                    <div className=\"columns\">\n                                        <div className=\"column\">\n                                            Office:\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.office![0]: ''}\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.office![1]: ''}\n                                        </div>\n                                    </div>\n                                    <div className=\"columns\">\n                                        <div className=\"column\">\n                                            Mobile:\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.mobile![0]:''}\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.mobile![1]:''}\n                                        </div>\n                                    </div>\n                                    <div className=\"columns\">\n                                        <div className=\"column\">\n                                            Home:\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.home![0]:''}\n                                        </div>\n                                        <div className=\"column\">\n                                            {user.phone?user.phone!.home![1]:''}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Nationality:\n                                </div>\n                                <div className=\"column\">\n                                    {user.nationality}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    State:\n                                </div>\n                                <div className=\"column\">\n                                    {user.state}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Zip:\n                                </div>\n                                <div className=\"column\">\n                                    {user.zip}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Landlord user?:\n                                </div>\n                                <div className=\"column\">\n                                    {user.landlord ? 'Yes' : 'No'}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <div className=\"box\">\n                                        <h5>Photo</h5>\n                                        <div className=\"columns\">\n                                            <div className=\"column\">\n                                                <img alt=\"user\" src={`/v1/users/${user.id}/photo`} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <div className=\"box\">\n                                        <h5>Assigned Roles</h5>\n                                        <div className=\"columns\">\n                                            <div className=\"column\">\n                                                <div className=\"field\">\n                                                    {user.roles! && user.roles!.length > 0 ?\n                                                        user.roles!.map((role) => { return <UserRolesDisplay role={role} /> }) :\n                                                        <div>No roles assigned to user yet</div>}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            {!user.landlord &&\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <div className=\"box\">\n                                            <h5 className=\"label\">Primary contact for</h5>\n                                            <div className=\"columns\">\n                                                <div className=\"column\">\n                                                    <div className=\"field\">\n                                                        {user.primaryContactForWhichTenants! && user.primaryContactForWhichTenants!.length > 0 ?\n                                                            user.primaryContactForWhichTenants!.map((tenant) => { return <PrimaryContactForWhichTenantsDisplay tenant={tenant} /> }) :\n                                                            <div>Not a primary contact for any tenant</div>}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            }\n                            {!user.landlord &&\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <div className=\"box\">\n                                            <h5>Tenant Team Membership for</h5>\n                                            <div className=\"columns\">\n                                                <div className=\"column\">\n                                                    <div className=\"field\">\n                                                        {user.tenantTeamMemberships! && user.tenantTeamMemberships!.length > 0 ?\n                                                            user.tenantTeamMemberships!.map((tenantTeam) => { return <TenantTeamMembershipsDisplay tenantTeam={tenantTeam} /> }) :\n                                                            <div>Not a team member of any tenant</div>}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <div className=\"buttons are-small\">\n                        <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\n                    </div>\n                </footer>\n            </div>\n        </div>\n    );\n}\n\nexport default ViewUser;\n","import React, { useEffect, useReducer } from 'react';\nimport { IAction, IUser, IState } from './app.interfaces';\nimport reducer from './reducers/app.reducer';\n\nimport { DEFAULT_ACTION_BUTTON_STATE } from '../global/app.settings';\nimport { IFindOptions } from '../global/app.interfaces';\nimport { handleReadUsers } from './crud-handlers/read';\nimport Alert from '../global/components/Alert';\nimport { handleUpdateUser } from './crud-handlers/update/update';\nimport { handleDeleteUser } from './crud-handlers/delete';\nimport { handleCreateUser } from './crud-handlers/create';\nimport UserList from './components/UserList';\nimport AddUser from './components/AddUser';\nimport EditUser from './components/EditUser';\nimport ViewUser from './components/ViewUser';\n\n/*Below is type definition for our context type.*/\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\n//different ones.\ntype AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteUser: Function, currentUsers: IUser[] };\n\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\n//We are also going to pass dispatch returned by useReducer.\nexport const AppContext = React.createContext<AppContextType>(null);\n\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\nWe don't have to do this. But it is good to know.*/\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n\nconst UserApp: React.FC<IState> = (props) => {//assuming that props passed will be initial state values\n\n  /*let us organize state, using useReducer*/\n  //Prepare initial state values\n  const initialState: IState =\n  {\n    users: [],\n    usersCount: 0, //for total number that corresponds to present find, in case of pagination\n    user: null, //This can be used for user to edit or user to view, depending on the function being carried out\n    onAddUser: false,\n    onViewUser: false,\n    onEditUser: false,\n    alert: {\n      show: false,\n      message: '',\n      type: ''\n    },\n    actionButtonState: DEFAULT_ACTION_BUTTON_STATE\n  };\n\n  //using useReducer instead of useState\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\n\n  /*Additional handler functions here*/\n  //Below is called by Alert component.\n  const handleCloseAlert = () => {\n    dispatch({ type: 'HandleCloseAlert' });\n  }\n\n  //let findOptions: IFindOptions = {}\n  let findOptions: IFindOptions = { \"relations\": [\"roles\", \"primaryContactForWhichTenants\", \"tenantTeamMemberships\"] };\n  /**\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\n   */\n  useEffect(() => {\n    handleReadUsers(dispatch, findOptions);\n    // eslint-disable-next-line\n  }, []);\n\n  //scroll to top each time alert state changes\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [state.alert])\n\n  /*Time to logically decide what to show.*/\n  //Setup alert component as a variable so we don't keep repeating\n  const myAlert = (\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n  )\n\n  //check if editUser should be loaded or not since it is conditional loading\n  if (state.onEditUser && state.user !== null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <EditUser user={state.user!} handleUpdateUser={handleUpdateUser} currentUsers={state.users!} dispatch={dispatch} />\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser, currentUsers: state.users! }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onAddUser) {//Display AddUser along with UserList if onAddUser is true\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AddUser handleCreateUser={handleCreateUser} currentUsers={state.users!} dispatch={dispatch} />\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser, currentUsers: state.users! }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onViewUser && state.user != null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser, currentUsers: state.users! }}>\n              <ViewUser user={state.user!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else {//onAddUser is false\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddUser' }) }}>+ Add User</button>\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser, currentUsers: state.users! }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserApp;\n","export const DEFAULT_ACTION_BUTTON_STATE = 'is-info';\nexport const API_VERSION_URL = '/v1';\n\n\nexport enum TenantTeamRole {\n    A = \"admin\",\n    M = \"marketing\",\n    C = \"content-manager\"\n}\n\nexport enum TenantAccountOfficerRole {\n    M = \"manager\",\n    T = \"tech-support\"\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import React from 'react';\nimport { Notification, Button } from 'react-bulma-components';\n\ntype Props = {\n    message: string,\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n    onClickHandler: ()=>void\n    \n}\n\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\n    return(\n        <Notification color={type} onClick={onClickHandler}>\n          {message}\n            <Button remove />\n        </Notification>\n    )\n}\n\nexport default Alert"],"sourceRoot":""}